---
description: 
globs: 
alwaysApply: false
---
---
description: Todo List for German Umlaut Solution
globs: *.py
alwaysApply: false
---
# German Umlaut Solution Implementation

## Requirements
Based on the provided german-umlaut-solution.md, we need to implement a comprehensive solution for handling German umlauts and encoding issues in our CSV processing.

## Todo List

### 1. Dependencies Installation
- [x] Install required packages: ftfy, charset-normalizer, unidecode, textacy (optional)
- [x] Update pyproject.toml with new dependencies

### 2. DataProcessor Enhancement
- [x] Create a new function `fix_encoding` using ftfy
- [x] Implement the comprehensive `read_csv_with_encoding_fix` function
- [x] Enhance `load_csv` method to use the new encoding detection and fixing approach
- [x] Add functions for Unicode normalization
- [x] Implement pattern-based corrections for common mojibake patterns
- [x] Add `fix_dataframe_text` function for advanced text processing
- [x] Create a proper writing function that preserves encodings: `write_csv_with_umlauts`

### 3. Testing and Verification
- [x] Test the solution with known problematic CSV files
- [x] Verify that umlauts are correctly preserved
- [x] Check that mojibake is properly fixed
- [x] Test both reading and writing functions

### 4. Integration
- [x] Ensure that MainWindow properly uses the enhanced DataProcessor
- [x] Update file export functionality to use `write_csv_with_umlauts`
- [x] Ensure proper error handling for encoding issues

### 5. Documentation
- [x] Document the changes in app_report.mdc
- [x] Update memory.mdc with implementation details

### 6. Bug Fixes
- [x] Fix CSV loading issue with German umlauts ("Failed to load CSV" error)
- [x] Improve encoding detection for European languages
- [x] Add comprehensive error handling and debugging

# Chart Tab Enhancement

## Requirements
We need to improve the Charts tab by addressing redundancy in the "data to show" and "sort by" options, and implementing a more logical selection mechanism.

## Todo List

### 1. Two-Step Data Selection Process
- [x] Replace old "Data to Show" dropdown with two logical selections
- [x] Add "Group By" dropdown for dimension selection (PLAYER, CHEST, SOURCE, DATE)
- [x] Add "Measure" dropdown for metric selection (TOTAL_SCORE, CHEST_COUNT, AVG_SCORE, etc.)
- [x] Create dynamic UI that updates available measures based on selected dimension
- [x] Implement dynamic sort options that change based on selected dimension

### 2. Code Refactoring
- [x] Update setup_charts_tab method to implement the new UI
- [x] Create new helper methods update_available_measures and update_sort_options
- [x] Modify update_chart_data_category to work with the Group By selection
- [x] Update update_chart_data_column to work with the Measure selection
- [x] Ensure backward compatibility with existing charts code

### 3. Chart Update Logic
- [x] Modify update_chart method to use the new two-step selection
- [x] Update chart title formatting to reflect Group By and Measure
- [x] Ensure proper data selection based on dimension and measure
- [x] Fix sorting functionality to work with the new structure

### 4. Export Functionality
- [x] Update save_chart method to work with the new selection process
- [x] Ensure both image export and data export functions properly
- [x] Fix CSV/Excel export to use the proper columns based on selections

### 5. Testing and Documentation
- [x] Document changes in app_report.mdc
- [x] Update memory.mdc with implementation details

## Progress
*2024-07-07: Completed Chart Tab Enhancement:*
- Implemented two-step data selection with Group By and Measure dropdowns
- Created dynamic measure options that change based on selected dimension
- Updated chart update logic to use the new selection process
- Fixed chart export functionality to work with the new structure
- Maintained backward compatibility with existing code
- Improved UX by eliminating redundancy in chart data selection
- Enhanced chart title to reflect the selected dimension and measure

# Consistent Pathlib Implementation

## Requirements
We need to consistently use the pathlib module throughout the codebase instead of os.path for better path handling.

## Todo List

### 1. Main.py Updates
- [x] Update create_directories() function to use only Path objects
- [x] Replace os.path.join and os.path.exists with Path methods
- [x] Update the icon_path handling to use Path

### 2. ConfigManager Updates
- [x] Update the ConfigManager class to use Path for directory management
- [x] Modify load_config() to use Path for file operations
- [x] Update all path-related methods to use Path objects

### 3. DataProcessor Updates
- [x] Refactor read_csv_with_encoding_fix() to use Path for file operations
- [x] Update file_exists checks to use Path.exists()
- [x] Modify file size checks to use Path.stat().st_size

### 4. Utils.py Updates
- [x] Update the ConfigManager class to use Path for directory operations
- [x] Modify path handling functions to use Path objects

### 5. MainWindow Updates
- [ ] Refactor path handling in load_csv_file() and related methods
- [ ] Update chart export functionality to use Path
- [ ] Update file dialog operations to work with Path objects

### 6. Other Modules
- [ ] Ensure consistent Path usage in ImportArea
- [ ] Update path operations in any other modules

### 7. Testing and Verification
- [ ] Test importing CSV files
- [ ] Verify exporting works properly
- [ ] Ensure directory creation works correctly

## Progress
*2024-07-06: Identified areas for pathlib conversion:*
- Found multiple instances of os.path.join and os.path.exists in main.py
- Discovered mixed usage of os.path and pathlib in ConfigManager
- Located file operations in DataProcessor that need conversion
- Identified multiple path operations in MainWindow class

*2024-07-06: Completed updates to main files:*
- Updated main.py to use Path objects consistently
- Converted all path operations in ConfigManager to use Path
- Updated ConfigManager in utils.py to use Path objects
- Refactored DataProcessor to use Path for file operations
- Changed file existence checks to use Path.exists()
- Modified file size checks to use Path.stat().st_size
- Consistently handle both str and Path file paths in all methods

*Key reminders:*
- Replace os.path.join(a, b) with Path(a) / b
- Replace os.path.exists(path) with Path(path).exists()
- Replace os.path.abspath(path) with Path(path).absolute()
- Replace os.makedirs(path, exist_ok=True) with Path(path).mkdir(parents=True, exist_ok=True)
- Replace os.path.dirname(path) with Path(path).parent
- Replace os.getcwd() with Path.cwd()
- Replace os.path.expanduser("~") with Path.home() 

# Report Tab Implementation

## Requirements
Implement a Report tab that was previously available before refactoring. The Report tab should provide comprehensive report generation capabilities with multiple report types and export options.

## Todo List

### 1. User Interface Implementation
- [x] Add a Report tab to the tab widget
- [x] Create report controls with report type selector
- [x] Add inclusion options (Charts, Tables, Statistics)
- [x] Create report generation and export buttons
- [x] Add QTextBrowser for displaying the generated report

### 2. Report Generation Functionality
- [x] Implement `setup_report_tab()` method to create the tab UI
- [x] Create `generate_report()` method to generate reports based on selection
- [x] Implement report generation logic for different report types:
  - [x] Full Report
  - [x] Player Performance
  - [x] Chest Type Analysis
  - [x] Source Analysis
- [x] Add HTML generation methods for each report type
- [x] Ensure proper styling using the Total Battle theme
- [x] Implement helper methods for generating different report sections:
  - [x] `_generate_charts_section`: Creates chart images for the report
  - [x] `_generate_tables_section`: Creates HTML tables from DataFrames
  - [x] `_generate_stats_section`: Creates statistical summaries
  - [x] Category-specific statistics methods for player, chest, and source data

### 3. Report Export Functionality
- [x] Implement `export_report()` method
- [x] Support exporting to HTML and PDF formats
- [x] Add file dialog for choosing export location
- [x] Ensure proper file handling with pathlib
- [x] Implement error handling for export operations

### 4. Integration with Existing Code
- [x] Update `enable_all_tabs()` and `disable_tabs_except_import()` to include the Report tab
- [x] Connect report controls to appropriate functions
- [x] Update `connect_signals()` method to include report button connections
- [x] Ensure tab visibility is properly managed

### 5. Testing and Validation
- [x] Test report generation with different report types
- [x] Test report export to HTML and PDF
- [x] Verify proper error handling when no data is available
- [x] Ensure reports reflect current data analysis
- [x] Fix MplCanvas initialization error where chart_container was incorrectly passed as first parameter

### 6. Documentation
- [x] Update app_report.mdc with Report tab functionality
- [x] Update memory.mdc with implementation details 

# Todo List

## Completed Tasks

- [x] Fix double file dialog issue in ImportArea and MainWindow
- [x] Add set_config_manager method to ImportArea class
- [x] Add consistent multi-color styling to charts in report generation
- [x] Fix missing update_available_measures and update_sort_options methods in Charts tab
- [x] Implement missing connect_signals method to properly connect all UI signals
- [x] Fix QAction import error (moved from QtWidgets to QtGui)
- [x] Implement missing export functionality for Raw Data and Analysis tabs
- [x] Restore missing report generation methods and fix connect_signals implementation
- [x] Create detailed refactoring plans for Phase 3: Service Layer Implementation
- [x] Create detailed refactoring plans for Phase 4 Part 1: UI Foundation
- [x] Create detailed refactoring plans for Phase 4 Part 2: UI Components

## In Progress Tasks

- [ ] Create detailed refactoring plans for Phase 4 Part 3: Application Screens
- [ ] Create detailed refactoring plans for Phase 4 Part 4: Integration with Services
- [ ] Create detailed refactoring plans for Phase 4 Part 5: User Experience Optimization

## Pending Tasks

- [ ] Implement Phase 3: Service Layer Implementation
- [ ] Implement Phase 4: UI Implementation

# Phase 4 Part 2: UI Components Implementation

## Requirements
Implement the UI components as detailed in the Phase 4 Part 2 refactoring plan. These components will serve as the building blocks for the application's user interface.

## Todo List

### 1. Data Table Components
- [ ] Create DataFrameModel class for pandas DataFrame display
- [ ] Implement DataTableWidget for tabular data display with filtering and sorting
- [ ] Create Enhanced Data Grid with advanced functionality
- [ ] Implement Data Pagination Component for large datasets

### 2. Chart and Visualization Widgets
- [ ] Create MplCanvas for matplotlib chart rendering
- [ ] Implement ChartWidget for displaying and interacting with charts
- [ ] Create Multi-Chart Container for organizing multiple charts
- [ ] Implement Chart Configuration Widgets for customization
- [ ] Create Advanced Charts with support for various chart types

### 3. Input Forms and Controls
- [ ] Create Form Field base class and specific field type implementations
- [ ] Implement FormWidget for form management and submission
- [ ] Create File Selection Widgets for file operations
- [ ] Implement Date/Time Selection Controls

### 4. Custom Dialogs and Modal Windows
- [ ] Create Dialog Base class for reusable dialog windows
- [ ] Implement Confirmation Dialog for user confirmations
- [ ] Create Settings Dialog for application configuration
- [ ] Implement Import/Export Dialog for data transfer

### 5. Notification and Alert System
- [ ] Create Toast Notification component for non-modal feedback
- [ ] Implement ToastManager for notification coordination
- [ ] Create Status Bar Integration for persistent status messages
- [ ] Implement Modal Alerts for critical information

### 6. Documentation and Testing
- [ ] Update application documentation with UI components overview
- [ ] Create guides for using each UI component
- [ ] Implement unit tests for UI components
- [ ] Validate component behavior across various scenarios

## Progress
*2024-06-18: Created detailed implementation plan:*
- Created comprehensive refactoring plan for UI Components including component structure, interface definitions, implementation details, and integration
- Defined clear implementation tasks for each component category
- Included detailed code examples for key components
- Established validation criteria for each component type

# Total Battle Analyzer: Phase 5 Implementation ToDo List

## Phase 5: Testing and Quality Assurance

### Part 1: Test Strategy and Framework
- [x] Create Test Strategy document
- [x] Set up pytest framework 
- [x] Define test organization structure
- [x] Create data fixtures for testing

### Part 2: Unit Testing
- [x] Define unit test approach
- [x] Create service layer unit tests
- [x] Create data processing unit tests
- [x] Create utility functions unit tests

### Part 3: Integration Testing
- [x] Define integration testing approach
- [x] Create Data-to-Service integration tests
- [x] Create Service-to-Service integration tests
- [x] Create UI-to-Service integration tests
- [x] Create End-to-End workflow tests

### Part 4: UI Testing and User Acceptance
- [x] Create UI Component Tests
  - [x] Data Table Widget tests
  - [x] Filter Panel Widget tests
  - [x] Chart Widget tests
  - [x] File Selector Widget tests
- [x] Create Screen Functionality Tests
  - [x] Import Screen tests
  - [x] Raw Data Screen tests
  - [x] Analysis Screen tests
- [x] Create Navigation and Application Flow Tests
  - [x] Main Window Navigation tests
  - [x] End-to-End Workflow tests
- [x] Create User Acceptance Tests
  - [x] First-time User Experience tests
  - [x] Error Handling Experience tests
  - [x] Data Persistence Experience tests
  - [x] Define User Acceptance Criteria

### Part 5: Performance, Security, and Deployment Testing

- [x] Create initial structure and plan for Performance, Security, and Deployment Testing
- [x] Develop Performance Testing implementation:
  - [x] Load Testing with Variable Data Sizes
  - [x] Stress Testing
  - [x] Memory Usage Optimization
  - [x] CPU Usage Profiling
  - [x] Response Time Benchmarking
- [x] Develop Security Testing implementation:
  - [x] Data Validation Testing
  - [x] Error Handling Security Tests
  - [x] Dependency Security Scanning
  - [x] File Path Traversal Security Tests
  - [x] Secure Data Export Tests
- [x] Develop Deployment Testing implementation:
  - [x] Installation Testing
  - [x] Multi-Platform Compatibility Testing
  - [x] Update and Upgrade Testing
  - [x] Environment Configuration Testing
  - [x] Distribution Package Testing
- [x] Update app_report.mdc with detailed information about:
  - [x] Performance Testing approach and implementation
  - [x] Security Testing approach and implementation
  - [x] Deployment Testing approach and implementation
- [x] Update memory.mdc to reflect completion of Phase 5 Part 5

## Next Steps

- Review entire Phase 5 test strategy for completeness
- Prepare for implementation of test cases in actual code
- Plan for potential Phase 6 (focused on continuous integration and deployment) 

# Phase 6: CI/CD, Monitoring and Maintenance Documentation

## Requirements
Create comprehensive documentation for Phase 6 of the Total Battle Analyzer project, focusing on establishing CI/CD pipelines, automated testing, deployment processes, monitoring, and maintenance procedures.

## Todo List

### 1. Phase 6 Overview
- [x] Create Phase 6 overview document outlining the approach to CI/CD and monitoring
- [x] Define objectives and structure for the Phase 6 documentation
- [x] Establish connections between Phase 6 and previous phases

### 2. CI/CD Strategy and Infrastructure (Part 1)
- [x] Document CI/CD workflow definition with comprehensive pipeline stages
- [x] Define quality gates and approval points
- [x] Detail deployment strategy and rollback procedures
- [x] Specify GitHub Actions configuration for CI/CD server
- [x] Document version control strategy with Gitflow approach
- [x] Define environment configuration management approach

### 3. Continuous Integration Implementation (Part 2)
- [x] Document code repository configuration and protection
- [x] Define automated build pipeline with GitHub Actions
- [x] Specify code quality checks and enforcement rules
- [x] Detail unit and integration test automation
- [x] Document dependency management and vulnerability scanning

### 4. Automated Testing Pipeline (Part 3)
- [x] Define test infrastructure setup and configuration
- [x] Document testing frameworks and organization
- [x] Specify integration test implementation approach
- [x] Detail UI automation testing strategy
- [x] Document performance and security test automation

### 5. Continuous Deployment Setup (Part 4)
- [x] Document deployment pipeline architecture
- [x] Define environment-specific configuration management
- [x] Detail deployment automation with infrastructure-as-code
- [x] Specify containerization approach for consistent deployments
- [x] Document release management with semantic versioning
- [x] Define feature flag system for controlled rollouts
- [x] Detail monitoring and feedback collection systems

### 6. Monitoring and Maintenance (Part 5)
- [x] Document system health monitoring implementation
- [x] Define performance metrics collection approach
- [x] Specify real-time alerting configuration
- [x] Detail alerting severity levels and response procedures
- [x] Document automated maintenance procedures
- [x] Define incident response framework
- [x] Specify continuous health assessment approach
- [x] Document knowledge management system

### 7. Documentation Updates
- [x] Update app_report.mdc with comprehensive Phase 6 information
- [x] Update memory.mdc to reflect completion of Phase 6 documentation
- [x] Update todo.mdc to mark Phase 6 documentation as completed

## Progress
*2024-07-21: Completed Phase 6 Documentation:*
- Created comprehensive documentation for all five parts of Phase 6
- Established detailed CI/CD strategy with GitHub Actions implementation
- Documented comprehensive testing automation approach
- Created detailed deployment pipeline architecture
- Specified advanced monitoring and maintenance procedures
- Updated app_report.mdc and memory.mdc with complete Phase 6 documentation
- All documentation follows consistent structure and includes implementation details

# German Umlaut Solution Implementation

// ... existing code ... 

# Total Battle Analyzer: Phase 5 Implementation ToDo List

## Phase 5: Testing and Quality Assurance

### Part 1: Test Strategy and Framework
- [x] Create Test Strategy document
- [x] Set up pytest framework 
- [x] Define test organization structure
- [x] Create data fixtures for testing

### Part 2: Unit Testing
- [x] Define unit test approach
- [x] Create service layer unit tests
- [x] Create data processing unit tests
- [x] Create utility functions unit tests

### Part 3: Integration Testing
- [x] Define integration testing approach
- [x] Create Data-to-Service integration tests
- [x] Create Service-to-Service integration tests
- [x] Create UI-to-Service integration tests
- [x] Create End-to-End workflow tests

### Part 4: UI Testing and User Acceptance
- [x] Create UI Component Tests
  - [x] Data Table Widget tests
  - [x] Filter Panel Widget tests
  - [x] Chart Widget tests
  - [x] File Selector Widget tests
- [x] Create Screen Functionality Tests
  - [x] Import Screen tests
  - [x] Raw Data Screen tests
  - [x] Analysis Screen tests
- [x] Create Navigation and Application Flow Tests
  - [x] Main Window Navigation tests
  - [x] End-to-End Workflow tests
- [x] Create User Acceptance Tests
  - [x] First-time User Experience tests
  - [x] Error Handling Experience tests
  - [x] Data Persistence Experience tests
  - [x] Define User Acceptance Criteria

### Part 5: Performance, Security, and Deployment Testing

- [x] Create initial structure and plan for Performance, Security, and Deployment Testing
- [x] Develop Performance Testing implementation:
  - [x] Load Testing with Variable Data Sizes
  - [x] Stress Testing
  - [x] Memory Usage Optimization
  - [x] CPU Usage Profiling
  - [x] Response Time Benchmarking
- [x] Develop Security Testing implementation:
  - [x] Data Validation Testing
  - [x] Error Handling Security Tests
  - [x] Dependency Security Scanning
  - [x] File Path Traversal Security Tests
  - [x] Secure Data Export Tests
- [x] Develop Deployment Testing implementation:
  - [x] Installation Testing
  - [x] Multi-Platform Compatibility Testing
  - [x] Update and Upgrade Testing
  - [x] Environment Configuration Testing
  - [x] Distribution Package Testing
- [x] Update app_report.mdc with detailed information about:
  - [x] Performance Testing approach and implementation
  - [x] Security Testing approach and implementation
  - [x] Deployment Testing approach and implementation
- [x] Update memory.mdc to reflect completion of Phase 5 Part 5

## Next Steps

- Review entire Phase 5 test strategy for completeness
- Prepare for implementation of test cases in actual code
- Plan for potential Phase 6 (focused on continuous integration and deployment) 

## Phase 7: Advanced Features & Ecosystem Expansion

## Part 1: Advanced Analytics & Machine Learning
- [x] Create detailed documentation for Statistical Analysis Framework
- [x] Create detailed documentation for Machine Learning Integration
- [x] Create detailed documentation for Performance Optimization
- [ ] Implement Statistical Core Library
- [ ] Implement Battle Statistics Analysis
- [ ] Implement ML Model Management
- [ ] Implement Performance Optimization

## Part 2: Plugin & Extension Framework
- [x] Create overview document for Plugin & Extension Framework
- [x] Create detailed document for Extensibility Architecture
- [x] Create detailed document for Plugin Management System
- [x] Create detailed document for Security Model for Third-Party Code
- [ ] Implement Core Extension Architecture
- [ ] Implement Plugin Interfaces and Registry
- [ ] Implement Plugin Management System
- [ ] Implement Security Model and Sandbox Environment

## Part 3: API & External Integration
- [x] Create overview document for API & External Integration
- [x] Create detailed document for RESTful API Implementation
- [x] Create detailed document for Authentication & Authorization
- [x] Create detailed document for External Platform Integration
- [ ] Implement Core API Infrastructure
- [ ] Implement Authentication and Authorization System
- [ ] Implement External Platform Connectors
- [ ] Implement Webhook System for Event Notification

# Total Battle Analyzer: Phase 5 Implementation ToDo List

## Phase 5: Testing and Quality Assurance

### Part 1: Test Strategy and Framework
- [x] Create Test Strategy document
- [x] Set up pytest framework 
- [x] Define test organization structure
- [x] Create data fixtures for testing

### Part 2: Unit Testing
- [x] Define unit test approach
- [x] Create service layer unit tests
- [x] Create data processing unit tests
- [x] Create utility functions unit tests

### Part 3: Integration Testing
- [x] Define integration testing approach
- [x] Create Data-to-Service integration tests
- [x] Create Service-to-Service integration tests
- [x] Create UI-to-Service integration tests
- [x] Create End-to-End workflow tests

### Part 4: UI Testing and User Acceptance
- [x] Create UI Component Tests
  - [x] Data Table Widget tests
  - [x] Filter Panel Widget tests
  - [x] Chart Widget tests
  - [x] File Selector Widget tests
- [x] Create Screen Functionality Tests
  - [x] Import Screen tests
  - [x] Raw Data Screen tests
  - [x] Analysis Screen tests
- [x] Create Navigation and Application Flow Tests
  - [x] Main Window Navigation tests
  - [x] End-to-End Workflow tests
- [x] Create User Acceptance Tests
  - [x] First-time User Experience tests
  - [x] Error Handling Experience tests
  - [x] Data Persistence Experience tests
  - [x] Define User Acceptance Criteria

### Part 5: Performance, Security, and Deployment Testing

- [x] Create initial structure and plan for Performance, Security, and Deployment Testing
- [x] Develop Performance Testing implementation:
  - [x] Load Testing with Variable Data Sizes
  - [x] Stress Testing
  - [x] Memory Usage Optimization
  - [x] CPU Usage Profiling
  - [x] Response Time Benchmarking
- [x] Develop Security Testing implementation:
  - [x] Data Validation Testing
  - [x] Error Handling Security Tests
  - [x] Dependency Security Scanning
  - [x] File Path Traversal Security Tests
  - [x] Secure Data Export Tests
- [x] Develop Deployment Testing implementation:
  - [x] Installation Testing
  - [x] Multi-Platform Compatibility Testing
  - [x] Update and Upgrade Testing
  - [x] Environment Configuration Testing
  - [x] Distribution Package Testing
- [x] Update app_report.mdc with detailed information about:
  - [x] Performance Testing approach and implementation
  - [x] Security Testing approach and implementation
  - [x] Deployment Testing approach and implementation
- [x] Update memory.mdc to reflect completion of Phase 5 Part 5

## Next Steps

- Review entire Phase 5 test strategy for completeness
- Prepare for implementation of test cases in actual code
- Plan for potential Phase 6 (focused on continuous integration and deployment) 

## Phase 7: Advanced Features & Ecosystem Expansion

## Part 1: Advanced Analytics & Machine Learning
- [x] Create detailed documentation for Statistical Analysis Framework
- [x] Create detailed documentation for Machine Learning Integration
- [x] Create detailed documentation for Performance Optimization
- [ ] Implement Statistical Core Library
- [ ] Implement Battle Statistics Analysis
- [ ] Implement ML Model Management
- [ ] Implement Performance Optimization

## Part 2: Plugin & Extension Framework
- [x] Create overview document for Plugin & Extension Framework
- [x] Create detailed document for Extensibility Architecture
- [x] Create detailed document for Plugin Management System
- [x] Create detailed document for Security Model for Third-Party Code
- [ ] Implement Core Extension Architecture
- [ ] Implement Plugin Interfaces and Registry
- [ ] Implement Plugin Management System
- [ ] Implement Security Model and Sandbox Environment

## Part 3: API & External Integration
- [x] Create overview document for API & External Integration
- [x] Create detailed document for RESTful API Implementation
- [x] Create detailed document for Authentication & Authorization
- [x] Create detailed document for External Platform Integration
- [ ] Implement Core API Infrastructure
- [ ] Implement Authentication and Authorization System
- [ ] Implement External Platform Connectors
- [ ] Implement Webhook System for Event Notification
