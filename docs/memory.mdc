---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: Project Memory
globs: *.py
alwaysApply: false
---
# Project Memory

## Current Context
- Total Battle analyzer application using PySide6 and matplotlib
- The application analyzes and visualizes data from Total Battle game
- Main file: src/total-battle-analyzer.py
- Main launcher: run.py

## Development History
- 2024-03-11: Initial project setup with PySide6, matplotlib, and pandas
- 2024-03-12: Fixed compatibility issue between matplotlib and PySide6
- 2024-03-12: Enhanced CSV loading to support multiple encodings
- 2024-03-12: Fixed pandas DataFrame boolean evaluation issue
- 2024-03-12: Updated QSortFilterProxyModel filtering API usage
- 2024-03-12: Fixed drag and drop functionality for CSV files (red crossed circle issue)
- 2024-03-12: Enhanced drag and drop with file extension filtering and visual feedback
- 2024-03-12: Comprehensive UI refactoring and drag-and-drop implementation
- 2024-03-12: Fixed method name mismatch in MainWindow initialization (disable_tabs_until_data_loaded -> disable_tabs_except_import)
- 2024-03-12: Fixed chart coloring consistency in update_chart method
- 2024-03-12: Fixed double file dialog issue by adding debounce mechanism and dialog active flag
- 2024-03-12: Added missing set_config_manager method to ImportArea class
- 2024-03-12: Enhanced double file dialog prevention with class-level flags and improved signal management
- 2024-03-12: Enhanced report chart generation with consistent multi-color styling for all chart types
- 2024-03-12: Implemented missing update_available_measures and update_sort_options methods for Charts tab
- 2024-03-12: Implemented missing connect_signals method to properly connect all UI element signals
- 2024-03-12: Fixed QAction import error (moved from QtWidgets to QtGui)
- 2024-03-12: Implemented missing export functionality for Raw Data and Analysis tabs
- 2024-03-12: Restored missing report generation methods and fixed connect_signals implementation
- 2024-03-13: Enhanced Windows-specific drag and drop compatibility with detailed logging
- 2024-03-13: Improved German umlaut handling by integrating enhanced DataProcessor methods throughout the application
- 2024-03-13: Updated `load_csv_file` to use the new `read_csv_with_encoding_fix` function for better umlaut handling
- 2024-03-13: Added additional text column processing with `fix_dataframe_text` for comprehensive umlaut fixes
- 2024-03-13: Ensured all CSV exports use the enhanced `write_csv_with_umlauts` function to preserve special characters
- 2024-03-13: Fixed CSV loading issue by prioritizing Windows-1252 encoding for German text
- 2024-03-13: Enhanced error handling and debugging for CSV loading to better diagnose encoding issues
- 2024-03-13: Improved encoding detection to use a fixed priority list favoring cp1252 for German characters
- 2024-03-14: Implemented alternative file import methods with menu bar and button to provide reliable import options beyond drag and drop
- 2024-03-14: Simplified and enhanced drag and drop implementation with more permissive event acceptance and improved file path handling
- 2024-03-15: Fixed crossed-out red icon issue during drag operations by enhancing drag event handling
- 2024-03-16: Added comprehensive diagnostic logging to troubleshoot persistent drag and drop issues
- 2024-03-17: Implemented direct diagnostic tools to detect drag and drop system issues at multiple levels
- 2024-03-18: Identified system-level drag and drop issues and implemented a persistent file selection panel as a reliable alternative
- 2024-03-18: Fixed resizeEvent handler in the window to properly accept required parameters (self, event)
- 2024-03-18: Removed all drag and drop functionality and refocused on file selection methods only
- 2024-03-18: Simplified the UI by removing diagnostic tools and refactoring the import tab
- 2024-03-18: Removed the persistent file selection panel for a cleaner interface
- 2024-03-21: Redesigned the application theme to match the Total Battle game with dark blue and gold accents
- 2024-03-22: Fixed analysis results error with dictionary empty check and removed duplicated menu items
- 2024-03-23: Implemented ConfigManager for persistent application settings
- 2024-03-23: Enhanced ImportArea to use configured import directories
- 2024-03-23: Updated export functionality to use configured export directories
- 2024-03-23: Enhanced German character encoding support for CSV files
- 2024-03-23: Fixed chart generation and added comprehensive logging
- 2024-03-24: Improved German umlaut detection by identifying and fixing garbled umlauts in player names
- 2024-03-24: Fixed chart column name case sensitivity issue by using DataFrame column names directly in the UI
- 2024-03-25: Fixed chart view selection for SOURCE and CHEST columns
- 2024-03-25: Improved button text readability by changing from black to white text
- 2024-03-25: Enforced required CSV columns (DATE, PLAYER, SOURCE, CHEST, SCORE) and automatic removal of extra columns
- 2024-03-26: Fixed import and export directory handling to use existing directories at project root
- 2024-03-27: Enhanced Raw Data Tab with date range filtering, multiple selection filters, and export functionality
- 2024-03-28: Improved Raw Data Tab UI with split layout, streamlined filtering controls, and select all/deselect all functionality
- 2024-03-29: Fixed value selection panel not appearing when "Select specific values" checkbox was checked
- 2024-03-30: Enhanced UI navigation by disabling all tabs except Import tab when no CSV file is loaded
- 2024-03-30: Improved visual indication for disabled tabs with lighter text color for better UX
- 2024-03-30: Refined gold color balance for better visual hierarchy - brighter for UI elements, darker for buttons
- 2024-03-31: Enhanced Analysis tab with advanced filtering capabilities and new Player Overview view
- 2024-03-31: Made "Player Overview" the default view in the Analysis tab for better user experience
- 2024-04-01: Modified the application to switch to the Analysis tab after loading a CSV file
- 2024-04-01: Moved "Player Overview" to be the first item in the analysis view selector for cleaner default selection
- 2024-04-01: Fixed issue where "Player Overview" selection wasn't persisting when chart data changed
- 2024-04-01: Fixed chart generation for Player Overview view by using TOTAL_SCORE/CHEST_COUNT columns
- 2024-04-02: Enhanced chart functionality with new chart types, customization options, and export capability
- 2024-04-02: Improved chart appearance with better styling options and color schemes
- 2024-04-02: Added data filtering options for charts including sorting and limiting to top N items
- 2024-04-03: Fixed missing methods in MainWindow class causing AttributeError exceptions
- 2024-05-01: Fixed styling issues with missing dark theme application
- 2024-05-01: Enhanced German character encoding detection and automatic fixing in CSV files
- 2024-05-01: Created comprehensive README.md and requirements.txt files
- 2024-05-02: Integrated all fixes directly into the main file (src/total-battle-analyzer.py)
- 2024-05-02: Created a unified launcher script (run.py) to replace multiple fix files
- 2024-05-02: Overhauled the error handling system with detailed stack traces and user-friendly error dialogs
- 2024-05-02: Enhanced window visibility to ensure proper display on startup
- 2024-05-02: Converted to UV and pyproject.toml for dependency management
- 2024-05-02: Enhanced styling in the main file with more consistent and complete theme application
- 2024-05-15: Fixed missing methods and tab enabling in load_csv_file method
- 2024-05-15: Fixed tab widget name discrepancy causing application startup failure
- 2024-05-15: Fixed raw data table attribute name discrepancy in load_csv_file method
- 2024-05-15: Fixed analysis selector attribute name discrepancy in load_csv_file method
- 2024-05-15: Fixed headers attribute reference in populate_filter_columns_dropdown method
- 2024-05-15: Fixed missing data check in update_filter_options method
- 2024-05-15: Fixed missing DataFrame assignment in load_csv_file method
- 2024-05-15: Enhanced `update_analysis_filter_options` with proper data availability checks
- 2024-05-15: Fixed widget name inconsistency in populate_filter_columns_dropdown method
- 2024-05-15: Fixed references from self.df to self.raw_data in analyze_data and analyze_chests_data methods
- 2024-05-15: Fixed missing analysis_results initialization in analyze_data method
- 2024-05-15: Implemented proper data aggregation in analyze_chests_data method
- 2024-05-15: Enhanced update_date_range_from_data method with robust error handling
- 2024-05-15: Added comprehensive error handling in update_analysis_view method
- 2024-05-15: Enhanced update_filter_options method with detailed logging and error handling
- 2024-05-15: Fixed infinite loop in update_filter_options method by blocking signals during UI updates
- 2024-05-15: Fixed infinite recursion in update_analysis_filter_options method
- 2024-05-15: Fixed missing value list population in update_analysis_filter_options method
- 2024-05-15: Fixed horizontal bar chart implementation to use direct matplotlib plotting
- 2024-05-16: Fixed horizontal bar chart implementation by correcting 'df' variable name to 'data'
- 2024-05-16: Fixed stacked bar chart to handle cases when there are no chest columns in player overview
- 2024-05-16: Enhanced player overview analysis to include source score breakdowns
- 2024-05-16: Improved tab title styling to make active tabs more prominent with bold gold text
- 2024-05-16: Refined player overview to focus on source scores only (removed chest type scores)
- 2024-05-16: Improved source column naming in player overview from "SOURCE_X" to "Source: X"
- 2024-05-16: Enhanced non-active tab visibility by using normal text color instead of grey
- 2024-05-16: Updated stacked bar chart to display source scores instead of chest type scores
- 2024-05-16: Removed "Source: " prefix from source column names in player overview for a cleaner display
- 2024-05-16: Added default sorting to player overview by TOTAL_SCORE in descending order
- 2024-05-16: Fixed issue where Player Overview in Analysis tab required applying a filter to display data
- 2024-05-16: Enhanced update_analysis_view method to ensure table model is properly set and visible
- 2024-05-16: Fixed tab selection logic to properly show the Analysis tab when needed
- 2024-05-16: Fixed issue where Player Overview data wasn't displayed automatically after loading CSV
- 2024-05-16: Added automatic filter application in load_csv_file to initialize view correctly
- 2024-05-16: Enhanced filter_analysis_data to auto-select a filter column when none is selected
- 2024-05-16: Updated DataProcessor.analyze_data method to use SOURCE columns instead of CHEST columns in Player Overview
- 2024-05-16: Ensured view switching works correctly by automatically applying filters when changing views
- 2024-06-01: Added new Report tab with comprehensive reporting capabilities
- 2024-06-01: Implemented HTML and PDF export functionality for reports
- 2024-06-01: Added four report types: Full Report, Player Performance, Chest Type Analysis, and Source Analysis
- 2024-06-01: Created professional styled report template with Total Battle theme
- 2024-06-01: Enhanced chart functionality with a new Bubble Chart type for 3D data visualization
- 2024-06-01: Improved integration of TOTAL_SCORE and CHEST_COUNT data in all chart types
- 2024-06-01: Added efficiency metrics (points per chest) for player performance analysis
- 2024-06-01: Enhanced chart data display with better labeling and formatting
- 2024-06-02: Fixed indentation issues in Report tab implementation methods
- 2024-06-03: Fixed remaining linter errors in Report tab implementation (TABLEAU_COLORS definition)
- 2024-06-03: Addressed multiple indentation issues throughout the codebase
- 2024-06-03: Created fix scripts for specific indentation problems
- 2024-06-11: Optimized filter areas in Raw Data and Analysis tabs to use full vertical space
- 2024-06-11: Removed unused placeholder in Charts tab and used full area for charts
- 2024-06-11: Added extensive chart customization options including data column selection, sorting, and limiting
- 2024-06-11: Added display options toggle for value labels and grid lines
- 2024-06-11: Implemented chart saving functionality supporting multiple formats (PNG, JPG, PDF, SVG)
- 2024-06-11: Enhanced chart value display with better positioning and bold text for improved readability
- 2024-06-13: Fixed layout change issue when toggling "Select specific values" checkbox in filter panels
- 2024-06-14: Reorganized chart controls to separate chart types from data categories
- 2024-06-14: Fixed sorting logic when limiting results to properly sort before applying limits
- 2024-06-14: Added support for different chart types (Bar, Horizontal Bar, Pie, Line) independent of data categories
- 2024-06-15: Added CSV and Excel export options for chart data to support spreadsheet applications
- 2024-06-15: Improved chart control UI organization with logical grouping and better labeling
- 2024-06-15: Fixed the relationship between "Show only top" checkbox and its related spin box
- 2024-06-15: Added explanatory text to clarify the relationship between data categories and values
- 2024-06-16: Completely redesigned Charts tab layout with horizontal splitter to maximize chart area
- 2024-06-16: Simplified data selection by removing redundant "Value to Measure" field
- 2024-06-16: Added automatic data column selection based on the chosen data category
- 2024-06-16: Fixed chart export functionality to work with hidden chart_data_column
- 2024-06-16: Standardized export directory name to 'exports' across all application components
- 2024-07-01: Enhanced German umlaut handling with a multi-tiered approach for consistent character display
- 2024-07-01: Implemented targeted fixes for common German names with encoding problems (Krmelmonster, Mller)
- 2024-07-01: Added direct string replacement, pattern-based detection, and Unicode replacement character handling
- 2024-07-01: Ensured consistent display of German character names regardless of original file encoding
- 2024-07-02: Improved preservation of properly formatted German umlauts to prevent "Feldjäger" from being mangled
- 2024-07-02: Modified encoding detection to prioritize German-friendly encodings by default for non-ASCII text
- 2024-07-02: Added special preservation logic for correctly formatted German names
- 2024-07-02: Reduced console debug output by disabling debug mode by default in DataProcessor and MainWindow
- 2024-07-02: Made debug print statements conditional to improve application performance and reduce console clutter
- 2024-07-03: Added extensive debug logging to track German character preservation throughout the processing pipeline
- 2024-07-03: Completely overhauled the character encoding handling system with a principled approach to encoding detection
- 2024-07-03: Implemented a scoring system to evaluate and select the optimal encoding based on German text quality
- 2024-07-03: Replaced all name-specific solutions with context-based linguistic pattern recognition
- 2024-07-03: Introduced a clean two-phase approach using temporary columns to fix character encoding issues
- 2024-07-03: Added multi-encoding processing to compare results from different encodings before selecting the best one
- 2024-07-04: Implemented fully generalized pattern-based approach for German character handling without any player-specific name corrections
- 2024-07-04: Added case-insensitive pattern matching for all German letter combinations with umlauts (Jäger, Müller, Krümel)
- 2024-07-04: Enhanced position-based character inference to determine likely umlauts based on surrounding characters
- 2024-07-04: Added support for multiple replacement character types (Unicode replacement character and question mark)
- 2024-07-04: Ensured early detection and preservation of properly encoded German characters to prevent any modification
- 2024-07-05: Implemented sophisticated encoding scoring and selection system to choose optimal encoding for German text
- 2024-07-05: Completely removed all specific name patterns (like "Jäger", "Müller") in favor of linguistic pattern recognition
- 2024-07-05: Enhanced character correction with context-sensitive approach using common letter adjacency in German
- 2024-07-05: Improved handling of replacement characters based on surrounding character context
- 2024-07-05: Added multi-pass correction strategy with prefix/suffix analysis for more accurate umlaut placement
- 2024-07-06: Refactored file path handling to consistently use pathlib throughout the codebase:
- 2024-07-06: Replaced os.path.join() with Path() / operator for improved path construction
- 2024-07-06: Updated file existence checks to use Path.exists() instead of os.path.exists()
- 2024-07-06: Converted file size checks to use Path.stat().st_size instead of os.path.getsize()
- 2024-07-06: Updated directory creation to use Path.mkdir(parents=True, exist_ok=True) instead of os.makedirs()
- 2024-07-06: Replaced os.path.expanduser("~") with Path.home() for better cross-platform compatibility
- 2024-07-06: Updated os.getcwd() with Path.cwd() for consistent path handling
- 2024-07-06: Enhanced file operation functions to accept both string and Path objects
- 2024-07-06: Improved ConfigManager path handling to use Path objects consistently
- 2024-07-06: Updated DataProcessor file operations to use pathlib properly
- 2024-07-15: Fixed bar chart duplicate number labels by adding text clearing code before new labels are drawn
- 2024-07-15: Fixed line chart functionality by restructuring the implementation to properly handle both date and non-date categories
- 2024-07-15: Enhanced chart code structure by removing duplicate implementations and nested if/else blocks
- 2024-07-15: Improved chart text object handling and formatting for better visualization
- 2024-07-15: Commented out duplicate generate_chart_for_report method to prevent conflicts
- 2024-07-17: Complete Chart System Rewrite

## Current Tasks

### 2024-07-15: Fixed Chart Issues - Duplicate Labels and Line Chart Functionality

- **Task**: Fix bar chart duplicate number labels and line chart functionality
- **Status**: Completed
- **Details**:
  - Fixed issues with duplicate number labels on all chart types:
    - Added code to clear existing text objects (`ax.texts.remove()`) at the beginning of the `update_chart` method
    - Added text clearing code in the `generate_chart_for_report` method as well
    - Kept existing chart-specific text clearing for redundancy and to handle specific edge cases
    - This universal approach ensures that no text objects persist between chart updates
  - Fixed line chart functionality:
    - Restructured the implementation to correctly handle both date and non-date categories
    - Added proper sorting for date-based line charts
    - Implemented correct x-axis labeling for non-date categories
    - Added text label positioning with duplicate prevention
  - Fixed code structure issues:
    - Removed a duplicate implementation of the generate_chart_for_report method
    - Fixed improper nested if/else blocks in chart rendering code
    - Enhanced pie chart text styling for better visibility
  - Tested the application extensively to ensure charts display correctly
  - Updated documentation with the changes made

### 2024-07-16: Implement Universal Text Clearing for Charts

- **Task**: Create a more robust solution for preventing duplicate text labels on charts
- **Status**: Completed
- **Details**:
  - Previous fixes for chart label duplication were specific to each chart type
  - Implemented a universal approach by clearing all text objects at the beginning of the chart update process
  - Added text clearing code right after creating the axes object, before any chart-specific rendering begins
  - Also applied the same fix to the report chart generation to maintain consistency
  - This solution is more maintainable as it works for all chart types including any future additions
  - Tested all chart types (Bar, Horizontal Bar, Pie, Line) to verify that labels are now displayed correctly
  - The fix preserves all intended text labels while preventing duplicates from accumulating

### 2024-07-16: Fixed Additional Chart Duplicate Text Label Issues

- **Task**: Fix remaining duplicate text label issues in bar charts and line charts
- **Status**: Completed
- **Details**:
  - Found and fixed a duplicate text clearing code block in the Horizontal Bar chart implementation
  - Added missing text clearing code to the scatter plot implementation's annotation section
  - Ensured consistent indentation in the annotation code blocks for improved code quality
  - These fixes complement the universal text clearing approach implemented earlier
  - The combination of these fixes ensures that all chart types now display text labels correctly without duplication
  - Tested all chart types after the fixes to confirm the elimination of duplicate text labels

### 2024-07-16: Fixed Chart Background Color and Text Styling Issues

- **Task**: Fix incorrect background color and text styling in charts
- **Status**: Completed
- **Details**:
  - Identified that when updating charts, the figure background and text colors were not being consistently styled
  - Created a comprehensive `reset_figure_style` method in the `MplCanvas` class:
    ```python
    def reset_figure_style(self, clear_fig=True):
        """Reset the figure style to default, optionally clearing it first."""
        # Clear figure, apply styling, handle fonts, text, etc.
    ```
  - Created text styling helper methods to ensure consistent text appearance:
    ```python
    def _add_styled_text(self, ax, x, y, text, ha='center', va='bottom', fontweight='bold', size=None):
        # Use default text color from style presets
        text_color = self.chart_canvas.style_presets['default']['text_color']
        # Apply consistent styling
    ```
  - Added a specialized `reset_report_chart_style` method to fix styling in report charts
  - Fixed matplotlib style overrides by removing built-in style usage
  - Updated all chart implementations to use these new methods for consistency
  - Fixed potential signal disconnection issues in the UI that were causing warnings
  - Tested all chart types to verify that backgrounds and text now display with the correct styling
  - The fix maintains chart style presets defined in the MplCanvas class, ensuring colors are consistent

### 2024-07-17: Implemented Comprehensive Chart Styling System

- **Task**: Create a robust and consistent styling system for all chart types
- **Status**: Completed
- **Details**:
  - Identified issues with inconsistent chart styling (black backgrounds instead of dark blue, inconsistent text colors)
  - Found that `plt.style.use('dark_background')` was overriding our custom styling in some places
  - Enhanced the `reset_figure_style` method in `MplCanvas` to call `plt.rcdefaults()` before applying custom styling
  - Added a standardized `add_styled_text` method to `MplCanvas` for consistent text styling
  - Updated `_add_styled_text` in `MainWindow` to delegate to the `MplCanvas` implementation
  - Created a consistent styling method for report charts with `_add_report_styled_text`
  - Ensured text clearing is done consistently across all chart types
  - Thoroughly tested all chart types to verify consistent dark blue backgrounds and proper text coloring
  - This solution provides a unified approach to chart styling that maintains consistency regardless of the chart type or context (regular vs. report)

### 2024-07-16: Fixed Indentation Issues in Report Generation Code

- **Task**: Fix indentation errors and code structure issues in the report generation functionality
- **Status**: Completed
- **Details**:
  - Found and fixed a major code structure issue where the HTML content from the `generate_report` method was incorrectly mixed with the `_create_report_scatter_chart` method
  - Properly restored the complete `generate_report` method with all its variables and functionality
  - Fixed various undefined variable errors that were preventing the report generation from working correctly
  - Ensured proper indentation throughout the file, particularly in the report generation sections
  - Verified the fix by successfully compiling the file with Python's py_compile module
  - This fix ensures that report generation functions correctly and maintains proper code structure
  - The application can now generate reports without syntactical errors or indentation issues

### 2024-07-17: Implemented Missing Chart Option Update Methods

- **Task**: Fix error during application startup related to missing chart option update methods
- **Status**: Completed
- **Details**:
  - During the chart system rewrite, the `update_sort_options` method was missing, causing an error during application startup
  - The `update_available_measures` method existed but was not implemented (just a pass statement)
  - Implemented both methods to properly update chart dropdown options:
    - `update_sort_options`: Updates the sort options in the `chart_sort_column` dropdown based on the selected data category
    - `update_available_measures`: Updates the available measures in the `chart_data_column` dropdown based on the selected data category
  - Enhanced the measures selection to include category-specific options like `TOTAL_SCORE` and `CHEST_COUNT` for players
  - Added special handling for the efficiency metric when both score and chest count data are available
  - Set default selections based on the data category to improve user experience
  - The chart system now properly initializes all dropdown options and keeps them in sync with the selected data category

### 2024-07-17: Implemented Missing Signal Connection Methods

- **Task**: Fix error during application startup related to missing signal connection methods
- **Status**: Completed
- **Details**:
  - During the chart system rewrite, the `connect_signals` method was removed, causing an error during application startup
  - The application was also missing the `open_csv_file` method referenced in signal connections
  - Implemented the complete `connect_signals` method to properly hook up all UI element signals:
    - ImportArea signals for file selection and loading
    - Menu actions for importing files and exiting the application
    - Raw data filter signals for filtering and value selection
    - Analysis filter signals for the Analysis tab
    - Chart option signals for all chart customization controls
    - Report generation signals for creating and exporting reports
  - Added comprehensive error handling with safe disconnection of existing signals to prevent duplicates
  - Implemented the `open_csv_file` method to maintain backward compatibility with existing signal connections
  - Added debugging output to help trace signal connection issues in the future
  - These fixes ensure all UI elements are properly connected to their respective handler methods

### 2024-07-17: Fixed Signal Disconnection Warning and Missing Export Methods

- **Task**: Fix runtime warning about signal disconnection and implement missing export methods
- **Status**: Complete
- **Details**:
  - Addressed two issues that were preventing the application from starting properly:
    1. Runtime warning: `Failed to disconnect (None) from signal "fileSelected(QString)"`
    2. Critical error: `'MainWindow' object has no attribute 'export_raw_data'`
  
  - Enhanced signal disconnection logic:
    - Added proper checking if signals exist and are connected before disconnecting
    - Improved error handling for signal disconnection with both TypeError and RuntimeError exceptions
    - Added conditional hasattr() checks to prevent errors with non-existent signals
  
  - Implemented missing export methods:
    - Added `export_raw_data` method for exporting filtered raw data to CSV
    - Added `export_analysis_data` method for exporting filtered analysis data to CSV
    - Both methods include comprehensive error handling, proper file path generation, user dialog for selecting save location, and status updates
    - Implemented proper handling of filter proxy models to export only the filtered data when filters are applied
  
  - Ensured both methods follow the application's export pattern:
    - Using the configured export directory from config_manager
    - Creating timestamped default filenames
    - Proper encoding for CSV files (utf-8-sig for German characters)
    - Consistent status bar messaging
  
  - The application now starts without any runtime warnings related to signal disconnection and all export functionality works as expected.

### 2024-07-17: Fixed Charts Tab Not Displaying Data After Chart System Rewrite

- **Task**: Fix issues with Charts tab not displaying data after the chart system rewrite
- **Status**: Complete
- **Details**:
  - Identified multiple issues preventing charts from being displayed after the recent comprehensive chart system rewrite:
    - Duplicate implementations of the `update_available_measures` method in the codebase
    - The method at the end of the file (just a stub with a `pass` statement) was overriding the actual implementation
    - Data category format mismatch between methods: the category format in `_get_chart_data` and `_get_category_column` methods was different from the format expected in the `update_available_measures` method
  
  - Implemented fixes:
    - Removed the duplicate stub implementation of `update_available_measures` at the end of the file
    - Updated the `_get_chart_data` and `_get_category_column` methods to use the standardized category format ("PLAYER", "CHEST", "SOURCE", "DATE")
    - Added improved error handling in both methods to provide better debug information
    - Enhanced docstrings for better clarity and future consistency
    - Added diagnostic messages to help trace data loading issues
  
  - Results:
    - The measure dropdown is now properly populated based on the selected data category
    - Charts are correctly displayed when data is available and measures are selected
    - All chart customization options (type, sort, limit, etc.) function as designed
    - Error handling is more robust with clear messages when no data is available
    - The complete chart system now works correctly while maintaining the enhancements from the rewrite

### 2024-07-17: Fixed NoneType Error During Chart Initialization at Startup

- **Task**: Fix TypeError at startup related to NoneType not being iterable in update_available_measures
- **Status**: Complete
- **Details**:
  - Fixed a critical error that was preventing the application from starting properly:
    ```
    TypeError: argument of type 'NoneType' is not iterable
    File "d:\Projekte\ChestParser\src\modules\mainwindow.py", line 2511, in update_available_measures
      if 'player_totals' in self.analysis_results and not self.analysis_results['player_totals'].empty:
    ```
  
  - Identified that the error occurred because the charts system was trying to access the analysis_results dictionary during startup when it was still None
  
  - Enhanced the update_available_measures method with proper null checks:
    - Added checks for `hasattr(self, 'analysis_results') and self.analysis_results is not None` before accessing the dictionary
    - Added similar checks before calling update_chart() to prevent cascading errors
    - Added debug output to help troubleshoot when chart updates are skipped due to missing data
  
  - The application now starts correctly and handles the case properly when no data is loaded yet
  - All chart functionality works normally once data is loaded
  - The chart system properly initializes to a default state during application startup

## 2024-07-17: Fixed Export Button Errors and CHEST Category Chart Issues

### Task
Fix errors in the export functionality and CHEST grouping in Charts tab

### Status
Completed

### Details
- Fixed two critical issues that were affecting the application:
  1. Export button error in Raw Data and Analysis tabs:
     - The export buttons were throwing an error: `AttributeError: 'str' object has no attribute 'mkdir'`
     - The root cause was that `ConfigManager.get_export_directory()` returns a string, but the code was trying to call `mkdir()` on it as if it were a Path object
     - Modified both `export_raw_data` and `export_analysis_data` methods to convert the string path to a Path object using `export_dir = Path(self.config_manager.get_export_directory())`
     - Added a comment to clarify the conversion purpose
     - This ensures that directory creation works correctly before saving exported files

  2. CHEST category chart issues in the Charts tab:
     - The "Group by" option for CHEST wasn't working correctly, preventing visualization of chest-related data
     - The issues were in the `_get_chart_data` method, which had incorrect indentation, missing error handling, and inconsistent data processing
     - Completely refactored the method to ensure consistent handling of all data categories (PLAYER, CHEST, SOURCE, DATE)
     - Added proper null checks for `analysis_results` at the beginning of the method
     - Implemented consistent debug output for all data categories to aid in troubleshooting
     - Fixed the return logic to ensure each code path properly returns either data or None
     - Added detailed error messages to help diagnose issues in the future
     - Ensured the method properly processes and returns chest_totals data when CHEST category is selected

- These fixes improve the application's stability and ensure all features function as expected:
  - Raw Data and Analysis export buttons now work correctly without errors
  - Charts tab now correctly displays data for all group by options, including CHEST
  - Error handling is more robust throughout the chart generation code
  - Debug output is comprehensive and consistent across all data categories

## Dependencies
- PySide6: 6.8.2.1
- matplotlib: 3.10.1
- pandas: 2.2.3
- numpy: 1.26.4
- ftfy: 6.1.3 (new)
- charset-normalizer: 3.3.2 (new)
- unidecode: 1.3.7 (new)

## Notes
- The application uses a dark blue and gold theme inspired by the Total Battle game
- Has multiple tabs: Import, Raw Data, Analysis, Charts, and Report
- CSV files may contain special characters requiring different encodings (like Windows-1252 or Latin-1)
- Proper pandas DataFrame handling requires checking `is None` or `.empty` rather than direct boolean evaluation
- PySide6 6.8.2.1 uses updated filtering API methods compared to older versions
- We now use a unified launcher (run.py) instead of multiple fix files
- All fixes have been integrated directly into the main file for simpler maintenance
- Application now has improved error handling with detailed tracebacks and user-friendly error dialogs
- The theme application has been enhanced to ensure consistent styling throughout the application
- Windows visibility issues have been addressed with proper window activation
- The application now uses UV with pyproject.toml for dependency management instead of pip with requirements.txt
  - IMPORTANT: Always use `uv add package_name` to add new dependencies to the project
  - For installing the project in development mode, use `uv pip install -e .`
  - Do NOT use `pip` for package management in this project
- The new Report tab provides comprehensive analysis with HTML/PDF export capabilities
- Chart functionality now includes 3D visualizations with bubble charts showing efficiency metrics
- Efficiency calculations (points per chest) provide additional insights into player performance
- Filter areas now use full vertical space for better usability when selecting values
- Charts tab has enhanced customization options and better space utilization
- The application now uses pathlib consistently for file and directory operations, which improves cross-platform compatibility

## File Structure
- src/
  - modules/
    - mainwindow.py - Contains the MainWindow class and UI logic
    - dataprocessor.py - Contains the DataProcessor class for data processing and analysis
    - models.py - Contains custom models for tables and data
    - ui/ - UI-related components
    - style/ - Styling and theme components
  - utils/
    - configuration.py - Configuration management
    - helpers.py - Helper functions
  - total-battle-analyzer.py - Main application entry point
- data/ - Contains sample data files
- docs/ - Documentation
  - app_report.mdc - Comprehensive report about the application
  - memory.mdc - This file
  - bugfixing.mdc - Bug tracking and fixes
- tests/ - Test scripts and data

## Previous Tasks
- Created test scripts to verify analysis functionality
- Added debug logging to help diagnose and fix issues
- Researched how the DataProcessor.analyze_data method works
- Implemented various test scripts to trace data flow

## Important Components
- MainWindow - Main application window with UI setup and event handling
- DataProcessor - Handles loading, processing, and analyzing data
- CustomTableModel - Custom model for displaying tabular data
- MplCanvas - Matplotlib integration for chart creation

## Known Issues
- ✅ Analysis tab showing raw data instead of processed analysis (FIXED)

## Notes
- The application follows a structure where the MainWindow contains UI logic and delegates data processing to DataProcessor
- The DataProcessor.analyze_data method returns a dictionary of DataFrames with various analysis types
- The duplicate method was causing the app to display raw data instead of processed data
- Debug logging was added to trace the data flow in the update_analysis_view method

## Recent Tasks (2024-03-12)

### Fixed Chart Coloring Issue
- Problem: Charts in the Charts tab were not being colored properly. All bars/segments were using the same color.
- Solution: Updated the `update_chart` method in `mainwindow.py` to use multiple colors from the TABLEAU_COLORS palette.
- Also enhanced the `MplCanvas` class to provide better style application methods and color palette access.

### Fixed Double File Dialog Issue
- Problem: When selecting a CSV file to import, a second file dialog would appear after the first one was closed.
- Root Cause: Multiple signal connections were triggering file dialogs, and there was no mechanism to prevent rapid successive calls.
- Solution: 
  1. Added a flag `_file_dialog_active`

## 2024-07-17: Fixed Player Grouping in Charts to Show Source Breakdown

### Task
Fix the issue where player grouping in charts doesn't show source breakdown (Guild, Battle, Event, etc.)

### Status
Completed

### Details
- Identified that the chart system was using `player_totals` DataFrame for PLAYER data category, which only contains PLAYER, SCORE, and CHEST_COUNT columns
- Modified the `_get_chart_data` method to use `player_overview` DataFrame instead, which contains additional source columns (Guild, Battle, Event, etc.)
- Updated the `update_available_measures` method to include source columns from `player_overview` in the measures dropdown
- Added fallback to `player_totals` if `player_overview` is not available for backward compatibility
- Added extensive debug output to help diagnose similar issues in the future
- Created a debug script (`debug_chart_data.py`) to test and verify the fix
- The chart system now properly shows all source columns as available measures when PLAYER is selected
- Users can now create charts showing Guild, Battle, Event, and other source scores for each player
- Source columns are dynamically detected from the data, so new source types will automatically appear in the measures dropdown

## 2024-07-17: Fixed Chart Export and Save Chart Functionality

### Task
Fix issues with chart export showing double popups, save chart button not working, and limited measure options for CHEST category

### Status
Completed

### Details
- Identified and fixed multiple issues with the chart export and save functionality:
  1. Removed duplicate signal connections in the setup_charts_tab method that were causing multiple popups
  2. Updated the update_available_measures method to add CHEST_COUNT for all data categories (CHEST, SOURCE, DATE)
  3. Enhanced the export_chart_data method to use player_overview data when PLAYER is selected
  4. Added debug print statements to both methods to help diagnose issues
  5. Ensured the save_chart method works correctly for all image formats (PNG, JPEG, PDF, SVG)
  6. Made the export_chart_data method show only one success popup
  7. Added status bar updates for better user feedback
- The chart system now provides more comprehensive measure options for all data categories
- Chart data export now includes source breakdown columns when exporting player data
- All chart export and save functionality works correctly with proper error handling