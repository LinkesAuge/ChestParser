---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: Project Memory
globs: *.py
alwaysApply: false
---
# Project Memory

## Current Context
- Total Battle analyzer application using PySide6 and matplotlib
- The application analyzes and visualizes data from Total Battle game
- Main file: src/total-battle-analyzer.py
- Main launcher: run.py

## Development History
- 2024-03-11: Initial project setup with PySide6, matplotlib, and pandas
- 2024-03-12: Fixed compatibility issue between matplotlib and PySide6
- 2024-03-12: Enhanced CSV loading to support multiple encodings
- 2024-03-12: Fixed pandas DataFrame boolean evaluation issue
- 2024-03-12: Updated QSortFilterProxyModel filtering API usage
- 2024-03-12: Fixed drag and drop functionality for CSV files (red crossed circle issue)
- 2024-03-12: Enhanced drag and drop with file extension filtering and visual feedback
- 2024-03-12: Comprehensive UI refactoring and drag-and-drop implementation
- 2024-03-13: Enhanced Windows-specific drag and drop compatibility with detailed logging
- 2024-03-14: Implemented alternative file import methods with menu bar and button to provide reliable import options beyond drag and drop
- 2024-03-14: Simplified and enhanced drag and drop implementation with more permissive event acceptance and improved file path handling
- 2024-03-15: Fixed crossed-out red icon issue during drag operations by enhancing drag event handling
- 2024-03-16: Added comprehensive diagnostic logging to troubleshoot persistent drag and drop issues
- 2024-03-17: Implemented direct diagnostic tools to detect drag and drop system issues at multiple levels
- 2024-03-18: Identified system-level drag and drop issues and implemented a persistent file selection panel as a reliable alternative
- 2024-03-18: Fixed resizeEvent handler in the window to properly accept required parameters (self, event)
- 2024-03-18: Removed all drag and drop functionality and refocused on file selection methods only
- 2024-03-18: Simplified the UI by removing diagnostic tools and refactoring the import tab
- 2024-03-18: Removed the persistent file selection panel for a cleaner interface
- 2024-03-21: Redesigned the application theme to match the Total Battle game with dark blue and gold accents
- 2024-03-22: Fixed analysis results error with dictionary empty check and removed duplicated menu items
- 2024-03-23: Implemented ConfigManager for persistent application settings
- 2024-03-23: Enhanced ImportArea to use configured import directories
- 2024-03-23: Updated export functionality to use configured export directories
- 2024-03-23: Enhanced German character encoding support for CSV files
- 2024-03-23: Fixed chart generation and added comprehensive logging
- 2024-03-24: Improved German umlaut detection by identifying and fixing garbled umlauts in player names
- 2024-03-24: Fixed chart column name case sensitivity issue by using DataFrame column names directly in the UI
- 2024-03-25: Fixed chart view selection for SOURCE and CHEST columns
- 2024-03-25: Improved button text readability by changing from black to white text
- 2024-03-25: Enforced required CSV columns (DATE, PLAYER, SOURCE, CHEST, SCORE) and automatic removal of extra columns
- 2024-03-26: Fixed import and export directory handling to use existing directories at project root
- 2024-03-27: Enhanced Raw Data Tab with date range filtering, multiple selection filters, and export functionality
- 2024-03-28: Improved Raw Data Tab UI with split layout, streamlined filtering controls, and select all/deselect all functionality
- 2024-03-29: Fixed value selection panel not appearing when "Select specific values" checkbox was checked
- 2024-03-30: Enhanced UI navigation by disabling all tabs except Import tab when no CSV file is loaded
- 2024-03-30: Improved visual indication for disabled tabs with lighter text color for better UX
- 2024-03-30: Refined gold color balance for better visual hierarchy - brighter for UI elements, darker for buttons
- 2024-03-31: Enhanced Analysis tab with advanced filtering capabilities and new Player Overview view
- 2024-03-31: Made "Player Overview" the default view in the Analysis tab for better user experience
- 2024-04-01: Modified the application to switch to the Analysis tab after loading a CSV file
- 2024-04-01: Moved "Player Overview" to be the first item in the analysis view selector for cleaner default selection
- 2024-04-01: Fixed issue where "Player Overview" selection wasn't persisting when chart data changed
- 2024-04-01: Fixed chart generation for Player Overview view by using TOTAL_SCORE/CHEST_COUNT columns
- 2024-04-02: Enhanced chart functionality with new chart types, customization options, and export capability
- 2024-04-02: Improved chart appearance with better styling options and color schemes
- 2024-04-02: Added data filtering options for charts including sorting and limiting to top N items
- 2024-04-03: Fixed missing methods in MainWindow class causing AttributeError exceptions
- 2024-05-01: Fixed styling issues with missing dark theme application
- 2024-05-01: Enhanced German character encoding detection and automatic fixing in CSV files
- 2024-05-01: Created comprehensive README.md and requirements.txt files
- 2024-05-02: Integrated all fixes directly into the main file (src/total-battle-analyzer.py)
- 2024-05-02: Created a unified launcher script (run.py) to replace multiple fix files
- 2024-05-02: Overhauled the error handling system with detailed stack traces and user-friendly error dialogs
- 2024-05-02: Enhanced window visibility to ensure proper display on startup
- 2024-05-02: Converted to UV and pyproject.toml for dependency management
- 2024-05-02: Enhanced styling in the main file with more consistent and complete theme application
- 2024-05-15: Fixed missing methods and tab enabling in load_csv_file method
- 2024-05-15: Fixed tab widget name discrepancy causing application startup failure
- 2024-05-15: Fixed raw data table attribute name discrepancy in load_csv_file method
- 2024-05-15: Fixed analysis selector attribute name discrepancy in load_csv_file method
- 2024-05-15: Fixed headers attribute reference in populate_filter_columns_dropdown method
- 2024-05-15: Fixed missing data check in update_filter_options method
- 2024-05-15: Fixed missing DataFrame assignment in load_csv_file method
- 2024-05-15: Enhanced `update_analysis_filter_options` with proper data availability checks
- 2024-05-15: Fixed widget name inconsistency in populate_filter_columns_dropdown method
- 2024-05-15: Fixed references from self.df to self.raw_data in analyze_data and analyze_chests_data methods
- 2024-05-15: Fixed missing analysis_results initialization in analyze_data method
- 2024-05-15: Implemented proper data aggregation in analyze_chests_data method
- 2024-05-15: Enhanced update_date_range_from_data method with robust error handling
- 2024-05-15: Added comprehensive error handling in update_analysis_view method
- 2024-05-15: Enhanced update_filter_options method with detailed logging and error handling
- 2024-05-15: Fixed infinite loop in update_filter_options method by blocking signals during UI updates
- 2024-05-15: Fixed infinite recursion in update_analysis_filter_options method
- 2024-05-15: Fixed missing value list population in update_analysis_filter_options method
- 2024-05-15: Fixed horizontal bar chart implementation to use direct matplotlib plotting
- 2024-05-16: Fixed horizontal bar chart implementation by correcting 'df' variable name to 'data'
- 2024-05-16: Fixed stacked bar chart to handle cases when there are no chest columns in player overview
- 2024-05-16: Enhanced player overview analysis to include source score breakdowns
- 2024-05-16: Improved tab title styling to make active tabs more prominent with bold gold text
- 2024-05-16: Refined player overview to focus on source scores only (removed chest type scores)
- 2024-05-16: Improved source column naming in player overview from "SOURCE_X" to "Source: X"
- 2024-05-16: Enhanced non-active tab visibility by using normal text color instead of grey
- 2024-05-16: Updated stacked bar chart to display source scores instead of chest type scores
- 2024-05-16: Removed "Source: " prefix from source column names in player overview for a cleaner display
- 2024-05-16: Added default sorting to player overview by TOTAL_SCORE in descending order
- 2024-05-16: Fixed issue where Player Overview in Analysis tab required applying a filter to display data
- 2024-05-16: Enhanced update_analysis_view method to ensure table model is properly set and visible
- 2024-05-16: Fixed tab selection logic to properly show the Analysis tab when needed
- 2024-05-16: Fixed issue where Player Overview data wasn't displayed automatically after loading CSV
- 2024-05-16: Added automatic filter application in load_csv_file to initialize view correctly
- 2024-05-16: Enhanced filter_analysis_data to auto-select a filter column when none is selected
- 2024-05-16: Updated DataProcessor.analyze_data method to use SOURCE columns instead of CHEST columns in Player Overview
- 2024-05-16: Ensured view switching works correctly by automatically applying filters when changing views
- 2024-06-01: Added new Report tab with comprehensive reporting capabilities
- 2024-06-01: Implemented HTML and PDF export functionality for reports
- 2024-06-01: Added four report types: Full Report, Player Performance, Chest Type Analysis, and Source Analysis
- 2024-06-01: Created professional styled report template with Total Battle theme
- 2024-06-01: Enhanced chart functionality with a new Bubble Chart type for 3D data visualization
- 2024-06-01: Improved integration of TOTAL_SCORE and CHEST_COUNT data in all chart types
- 2024-06-01: Added efficiency metrics (points per chest) for player performance analysis
- 2024-06-01: Enhanced chart data display with better labeling and formatting
- 2024-06-02: Fixed indentation issues in Report tab implementation methods
- 2024-06-03: Fixed remaining linter errors in Report tab implementation (TABLEAU_COLORS definition)
- 2024-06-03: Addressed multiple indentation issues throughout the codebase
- 2024-06-03: Created fix scripts for specific indentation problems

## Current Tasks
- Enhanced application theme:
  - Removed light theme completely to maintain consistent dark theme
  - Updated dark theme colors:
    - Main background: #1A2742
    - Secondary background: #2A3752
    - Text: #FFFFFF (primary), #8899AA (secondary)
    - Accent: #D4AF37 (gold)
    - Hover: #F0C75A (light gold)
  - Updated chart styling to match application theme:
    - Chart background: #1A2742
    - Grid color: #3A4762
    - Text color: #FFFFFF
    - Title color: #D4AF37
    - Chart colors: Gold (#D4AF37), Blue (#5991C4), Green (#6EC1A7), Red (#D46A5F)
  - Removed theme selection from settings
  - Updated ConfigManager to always use dark theme
  - Ensured consistent styling across all UI components
  - Enhanced chart readability with proper contrast
  - Improved visual hierarchy with gold accents

## Dependencies
- PySide6: 6.8.2.1
- matplotlib: 3.10.1
- pandas: 2.2.3
- numpy: 1.26.4

## Notes
- The application uses a dark blue and gold theme inspired by the Total Battle game
- Has multiple tabs: Import, Raw Data, Analysis, Charts, and Report
- CSV files may contain special characters requiring different encodings (like Windows-1252 or Latin-1)
- Proper pandas DataFrame handling requires checking `is None` or `.empty` rather than direct boolean evaluation
- PySide6 6.8.2.1 uses updated filtering API methods compared to older versions
- We now use a unified launcher (run.py) instead of multiple fix files
- All fixes have been integrated directly into the main file for simpler maintenance
- Application now has improved error handling with detailed tracebacks and user-friendly error dialogs
- The theme application has been enhanced to ensure consistent styling throughout the application
- Windows visibility issues have been addressed with proper window activation
- The application now uses UV with pyproject.toml for dependency management instead of pip with requirements.txt
- The new Report tab provides comprehensive analysis with HTML/PDF export capabilities
- Chart functionality now includes 3D visualizations with bubble charts showing efficiency metrics
- Efficiency calculations (points per chest) provide additional insights into player performance

## 2024-06-01: Added Report Tab
- Implemented a new Report tab with comprehensive reporting capabilities
- Added HTML and PDF export functionality
- Created four report types:
  1. Full Report - comprehensive overview of all data
  2. Player Performance - focused on player scores, chest counts, and efficiency
  3. Chest Type Analysis - detailed breakdown of chest types and their values
  4. Source Analysis - analysis of score sources and their distribution
- Created professional styled report template with Total Battle theme
- Implemented chart generation for reports with various visualization types
- Added export functionality for both HTML and PDF formats with page setup options

## 2024-06-01: Enhanced Chart Functionality
- Added TOTAL_SCORE and CHEST_COUNT to chart data selector
- Implemented new Bubble Chart type for 3D data visualization (score vs chest count with efficiency as bubble size)
- Improved chart data display with better axis labels and titles
- Added efficiency metrics (points per chest) for player performance analysis
- Enhanced chart type selector to work with all data types

## 2024-05-31: Fixed Filter Selection Functionality
- Fixed issue with filter selection not working properly
- Implemented signal blocking during filter list updates
- Added proper error handling and data validation
- Fixed visibility toggle for analysis value selection panel

## Current Task
Implementing the Report tab functionality in the Total Battle Analyzer application. The Report tab allows users to generate comprehensive reports with charts, tables, and statistics. Reports can be exported as HTML or PDF files.

## Implementation Details
- Added `setup_report_tab` method to create the UI components for the Report tab
- Implemented `generate_report` method to create HTML content for reports
- Created specialized report generation methods for different report types:
  - `create_full_report_html`
  - `create_player_performance_html`
  - `create_chest_analysis_html`
  - `create_source_analysis_html`
- Added `export_report` method to save reports as HTML or PDF
- Implemented `generate_chart_for_report` helper method to create chart images for reports
- Added necessary imports: QPrinter, QPageSetupDialog from PySide6.QtPrintSupport

## Next Steps
- Test the Report tab functionality with various data sets
- Consider adding more report customization options
- Explore additional chart types for better data visualization
- Add option to save report templates for future use

## Notes
- The Report tab is only enabled after data is loaded
- Reports are generated based on the current analysis results
- PDF export requires the QPrinter module from PySide6.QtPrintSupport
- Chart generation uses matplotlib to create temporary image files
- HTML reports use a dark theme matching the application's UI
 