---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: Project Memory
globs: *.py
alwaysApply: false
---
# Project Memory

## Current Context
- Total Battle analyzer application using PySide6 and matplotlib
- The application analyzes and visualizes data from Total Battle game
- Main file: src/total-battle-analyzer.py
- Main launcher: run.py

## Development History
- 2024-03-11: Initial project setup with PySide6, matplotlib, and pandas
- 2024-03-12: Fixed compatibility issue between matplotlib and PySide6
- 2024-03-12: Enhanced CSV loading to support multiple encodings
- 2024-03-12: Fixed pandas DataFrame boolean evaluation issue
- 2024-03-12: Updated QSortFilterProxyModel filtering API usage
- 2024-03-12: Fixed drag and drop functionality for CSV files (red crossed circle issue)
- 2024-03-12: Enhanced drag and drop with file extension filtering and visual feedback
- 2024-03-12: Comprehensive UI refactoring and drag-and-drop implementation
- 2024-03-13: Enhanced Windows-specific drag and drop compatibility with detailed logging
- 2024-03-14: Implemented alternative file import methods with menu bar and button to provide reliable import options beyond drag and drop
- 2024-03-14: Simplified and enhanced drag and drop implementation with more permissive event acceptance and improved file path handling
- 2024-03-15: Fixed crossed-out red icon issue during drag operations by enhancing drag event handling
- 2024-03-16: Added comprehensive diagnostic logging to troubleshoot persistent drag and drop issues
- 2024-03-17: Implemented direct diagnostic tools to detect drag and drop system issues at multiple levels
- 2024-03-18: Identified system-level drag and drop issues and implemented a persistent file selection panel as a reliable alternative
- 2024-03-18: Fixed resizeEvent handler in the window to properly accept required parameters (self, event)
- 2024-03-18: Removed all drag and drop functionality and refocused on file selection methods only
- 2024-03-18: Simplified the UI by removing diagnostic tools and refactoring the import tab
- 2024-03-18: Removed the persistent file selection panel for a cleaner interface
- 2024-03-21: Redesigned the application theme to match the Total Battle game with dark blue and gold accents
- 2024-03-22: Fixed analysis results error with dictionary empty check and removed duplicated menu items
- 2024-03-23: Implemented ConfigManager for persistent application settings
- 2024-03-23: Enhanced ImportArea to use configured import directories
- 2024-03-23: Updated export functionality to use configured export directories
- 2024-03-23: Enhanced German character encoding support for CSV files
- 2024-03-23: Fixed chart generation and added comprehensive logging
- 2024-03-24: Improved German umlaut detection by identifying and fixing garbled umlauts in player names
- 2024-03-24: Fixed chart column name case sensitivity issue by using DataFrame column names directly in the UI
- 2024-03-25: Fixed chart view selection for SOURCE and CHEST columns
- 2024-03-25: Improved button text readability by changing from black to white text
- 2024-03-25: Enforced required CSV columns (DATE, PLAYER, SOURCE, CHEST, SCORE) and automatic removal of extra columns
- 2024-03-26: Fixed import and export directory handling to use existing directories at project root
- 2024-03-27: Enhanced Raw Data Tab with date range filtering, multiple selection filters, and export functionality
- 2024-03-28: Improved Raw Data Tab UI with split layout, streamlined filtering controls, and select all/deselect all functionality
- 2024-03-29: Fixed value selection panel not appearing when "Select specific values" checkbox was checked
- 2024-03-30: Enhanced UI navigation by disabling all tabs except Import tab when no CSV file is loaded
- 2024-03-30: Improved visual indication for disabled tabs with lighter text color for better UX
- 2024-03-30: Refined gold color balance for better visual hierarchy - brighter for UI elements, darker for buttons
- 2024-03-31: Enhanced Analysis tab with advanced filtering capabilities and new Player Overview view
- 2024-03-31: Made "Player Overview" the default view in the Analysis tab for better user experience
- 2024-04-01: Modified the application to switch to the Analysis tab after loading a CSV file
- 2024-04-01: Moved "Player Overview" to be the first item in the analysis view selector for cleaner default selection
- 2024-04-01: Fixed issue where "Player Overview" selection wasn't persisting when chart data changed
- 2024-04-01: Fixed chart generation for Player Overview view by using TOTAL_SCORE/CHEST_COUNT columns
- 2024-04-02: Enhanced chart functionality with new chart types, customization options, and export capability
- 2024-04-02: Improved chart appearance with better styling options and color schemes
- 2024-04-02: Added data filtering options for charts including sorting and limiting to top N items
- 2024-04-03: Fixed missing methods in MainWindow class causing AttributeError exceptions
- 2024-05-01: Fixed styling issues with missing dark theme application
- 2024-05-01: Enhanced German character encoding detection and automatic fixing in CSV files
- 2024-05-01: Created comprehensive README.md and requirements.txt files
- 2024-05-02: Integrated all fixes directly into the main file (src/total-battle-analyzer.py)
- 2024-05-02: Created a unified launcher script (run.py) to replace multiple fix files
- 2024-05-02: Overhauled the error handling system with detailed stack traces and user-friendly error dialogs
- 2024-05-02: Enhanced window visibility to ensure proper display on startup
- 2024-05-02: Converted to UV and pyproject.toml for dependency management
- 2024-05-02: Enhanced styling in the main file with more consistent and complete theme application
- 2024-05-15: Fixed missing methods and tab enabling in load_csv_file method
- 2024-05-15: Fixed tab widget name discrepancy causing application startup failure
- 2024-05-15: Fixed raw data table attribute name discrepancy in load_csv_file method
- 2024-05-15: Fixed analysis selector attribute name discrepancy in load_csv_file method
- 2024-05-15: Fixed headers attribute reference in populate_filter_columns_dropdown method
- 2024-05-15: Fixed missing data check in update_filter_options method
- 2024-05-15: Fixed missing DataFrame assignment in load_csv_file method
- 2024-05-15: Enhanced `update_analysis_filter_options` with proper data availability checks
- 2024-05-15: Fixed widget name inconsistency in populate_filter_columns_dropdown method
- 2024-05-15: Fixed references from self.df to self.raw_data in analyze_data and analyze_chests_data methods
- 2024-05-15: Fixed missing analysis_results initialization in analyze_data method
- 2024-05-15: Implemented proper data aggregation in analyze_chests_data method
- 2024-05-15: Enhanced update_date_range_from_data method with robust error handling
- 2024-05-15: Added comprehensive error handling in update_analysis_view method
- 2024-05-15: Enhanced update_filter_options method with detailed logging and error handling
- 2024-05-15: Fixed infinite loop in update_filter_options method by blocking signals during UI updates
- 2024-05-15: Fixed infinite recursion in update_analysis_filter_options method
- 2024-05-15: Fixed missing value list population in update_analysis_filter_options method
- 2024-05-15: Fixed horizontal bar chart implementation to use direct matplotlib plotting
- 2024-05-16: Fixed horizontal bar chart implementation by correcting 'df' variable name to 'data'
- 2024-05-16: Fixed stacked bar chart to handle cases when there are no chest columns in player overview
- 2024-05-16: Enhanced player overview analysis to include source score breakdowns
- 2024-05-16: Improved tab title styling to make active tabs more prominent with bold gold text
- 2024-05-16: Refined player overview to focus on source scores only (removed chest type scores)
- 2024-05-16: Improved source column naming in player overview from "SOURCE_X" to "Source: X"
- 2024-05-16: Enhanced non-active tab visibility by using normal text color instead of grey
- 2024-05-16: Updated stacked bar chart to display source scores instead of chest type scores
- 2024-05-16: Removed "Source: " prefix from source column names in player overview for a cleaner display
- 2024-05-16: Added default sorting to player overview by TOTAL_SCORE in descending order
- 2024-05-16: Fixed issue where Player Overview in Analysis tab required applying a filter to display data
- 2024-05-16: Enhanced update_analysis_view method to ensure table model is properly set and visible
- 2024-05-16: Fixed tab selection logic to properly show the Analysis tab when needed
- 2024-05-16: Fixed issue where Player Overview data wasn't displayed automatically after loading CSV
- 2024-05-16: Added automatic filter application in load_csv_file to initialize view correctly
- 2024-05-16: Enhanced filter_analysis_data to auto-select a filter column when none is selected
- 2024-05-16: Updated DataProcessor.analyze_data method to use SOURCE columns instead of CHEST columns in Player Overview
- 2024-05-16: Ensured view switching works correctly by automatically applying filters when changing views
- 2024-06-01: Added new Report tab with comprehensive reporting capabilities
- 2024-06-01: Implemented HTML and PDF export functionality for reports
- 2024-06-01: Added four report types: Full Report, Player Performance, Chest Type Analysis, and Source Analysis
- 2024-06-01: Created professional styled report template with Total Battle theme
- 2024-06-01: Enhanced chart functionality with a new Bubble Chart type for 3D data visualization
- 2024-06-01: Improved integration of TOTAL_SCORE and CHEST_COUNT data in all chart types
- 2024-06-01: Added efficiency metrics (points per chest) for player performance analysis
- 2024-06-01: Enhanced chart data display with better labeling and formatting
- 2024-06-02: Fixed indentation issues in Report tab implementation methods
- 2024-06-03: Fixed remaining linter errors in Report tab implementation (TABLEAU_COLORS definition)
- 2024-06-03: Addressed multiple indentation issues throughout the codebase
- 2024-06-03: Created fix scripts for specific indentation problems
- 2024-06-11: Optimized filter areas in Raw Data and Analysis tabs to use full vertical space
- 2024-06-11: Removed unused placeholder in Charts tab and used full area for charts
- 2024-06-11: Added extensive chart customization options including data column selection, sorting, and limiting
- 2024-06-11: Added display options toggle for value labels and grid lines
- 2024-06-11: Implemented chart saving functionality supporting multiple formats (PNG, JPG, PDF, SVG)
- 2024-06-11: Enhanced chart value display with better positioning and bold text for improved readability
- 2024-06-13: Fixed layout change issue when toggling "Select specific values" checkbox in filter panels
- 2024-06-14: Reorganized chart controls to separate chart types from data categories
- 2024-06-14: Fixed sorting logic when limiting results to properly sort before applying limits
- 2024-06-14: Added support for different chart types (Bar, Horizontal Bar, Pie, Line) independent of data categories
- 2024-06-15: Added CSV and Excel export options for chart data to support spreadsheet applications
- 2024-06-15: Improved chart control UI organization with logical grouping and better labeling
- 2024-06-15: Fixed the relationship between "Show only top" checkbox and its related spin box
- 2024-06-15: Added explanatory text to clarify the relationship between data categories and values
- 2024-06-16: Completely redesigned Charts tab layout with horizontal splitter to maximize chart area
- 2024-06-16: Simplified data selection by removing redundant "Value to Measure" field
- 2024-06-16: Added automatic data column selection based on the chosen data category
- 2024-06-16: Fixed chart export functionality to work with hidden chart_data_column
- 2024-06-16: Standardized export directory name to 'exports' across all application components
- 2024-07-01: Enhanced German umlaut handling with a multi-tiered approach for consistent character display
- 2024-07-01: Implemented targeted fixes for common German names with encoding problems (Krmelmonster, Mller)
- 2024-07-01: Added direct string replacement, pattern-based detection, and Unicode replacement character handling
- 2024-07-01: Ensured consistent display of German character names regardless of original file encoding
- 2024-07-02: Improved preservation of properly formatted German umlauts to prevent "Feldjäger" from being mangled
- 2024-07-02: Modified encoding detection to prioritize German-friendly encodings by default for non-ASCII text
- 2024-07-02: Added special preservation logic for correctly formatted German names
- 2024-07-02: Reduced console debug output by disabling debug mode by default in DataProcessor and MainWindow
- 2024-07-02: Made debug print statements conditional to improve application performance and reduce console clutter
- 2024-07-03: Added extensive debug logging to track German character preservation throughout the processing pipeline
- 2024-07-03: Completely overhauled the character encoding handling system with a principled approach to encoding detection
- 2024-07-03: Implemented a scoring system to evaluate and select the optimal encoding based on German text quality
- 2024-07-03: Replaced all name-specific solutions with context-based linguistic pattern recognition
- 2024-07-03: Introduced a clean two-phase approach using temporary columns to fix character encoding issues
- 2024-07-03: Added multi-encoding processing to compare results from different encodings before selecting the best one
- 2024-07-04: Implemented fully generalized pattern-based approach for German character handling without any player-specific name corrections
- 2024-07-04: Added case-insensitive pattern matching for all German letter combinations with umlauts (Jäger, Müller, Krümel)
- 2024-07-04: Enhanced position-based character inference to determine likely umlauts based on surrounding characters
- 2024-07-04: Added support for multiple replacement character types (Unicode replacement character and question mark)
- 2024-07-04: Ensured early detection and preservation of properly encoded German characters to prevent any modification
- 2024-07-05: Implemented sophisticated encoding scoring and selection system to choose optimal encoding for German text
- 2024-07-05: Completely removed all specific name patterns (like "Jäger", "Müller") in favor of linguistic pattern recognition
- 2024-07-05: Enhanced character correction with context-sensitive approach using common letter adjacency in German
- 2024-07-05: Improved handling of replacement characters based on surrounding character context
- 2024-07-05: Added multi-pass correction strategy with prefix/suffix analysis for more accurate umlaut placement

## Current Tasks
- UI Layout Improvements:
  - Fixed issue in the Raw Data and Analysis tabs where filter/view options didn't use full vertical space
  - Fixed issue in the Charts tab where an empty section was displayed instead of using the full space for charts
  - Fixed issue where deselecting "Select specific values" checkbox would change the layout of the filter box
  - Reorganized chart controls to properly separate:
    - Chart types (Bar Chart, Horizontal Bar, Pie Chart, Line Chart)
    - Data categories (Player Totals, Chest Totals, Source Totals, Date Totals)
    - Data columns (SCORE, CHEST_COUNT, TOTAL_SCORE)
  - Fixed sorting logic when limiting results to ensure proper order with top N items
  - Added comprehensive chart customization options including:
    - Sorting options by column and direction
    - Results limiting with top N control
    - Display options for value labels and grid lines
    - Chart saving functionality with multiple format support
  - Enhanced chart UI with logical grouping of related controls:
    - Added explanatory text to clarify relationships between controls
    - Organized controls into functional groups with clear labels
    - Improved layout of related controls like checkboxes and their settings
  - Added data export functionality for Excel/Google Sheets:
    - Added CSV export option
    - Added Excel XLSX export with fallback to CSV
    - Added export type selection dialog
  - Implemented proper widget size policies for better space utilization
  - Used stretch factors to optimize vertical space in layouts
  - Redesigned Charts tab with horizontal splitter layout (controls on left, chart on right)
  - Simplified data selection by automating data column choice based on data category

## Dependencies
- PySide6: 6.8.2.1
- matplotlib: 3.10.1
- pandas: 2.2.3
- numpy: 1.26.4

## Notes
- The application uses a dark blue and gold theme inspired by the Total Battle game
- Has multiple tabs: Import, Raw Data, Analysis, Charts, and Report
- CSV files may contain special characters requiring different encodings (like Windows-1252 or Latin-1)
- Proper pandas DataFrame handling requires checking `is None` or `.empty` rather than direct boolean evaluation
- PySide6 6.8.2.1 uses updated filtering API methods compared to older versions
- We now use a unified launcher (run.py) instead of multiple fix files
- All fixes have been integrated directly into the main file for simpler maintenance
- Application now has improved error handling with detailed tracebacks and user-friendly error dialogs
- The theme application has been enhanced to ensure consistent styling throughout the application
- Windows visibility issues have been addressed with proper window activation
- The application now uses UV with pyproject.toml for dependency management instead of pip with requirements.txt
- The new Report tab provides comprehensive analysis with HTML/PDF export capabilities
- Chart functionality now includes 3D visualizations with bubble charts showing efficiency metrics
- Efficiency calculations (points per chest) provide additional insights into player performance
- Filter areas now use full vertical space for better usability when selecting values
- Charts tab has enhanced customization options and better space utilization

## 2024-06-01: Added Report Tab
- Implemented a new Report tab with comprehensive reporting capabilities
- Added HTML and PDF export functionality
- Created four report types:
  1. Full Report - comprehensive overview of all data
  2. Player Performance - focused on player scores, chest counts, and efficiency
  3. Chest Type Analysis - detailed breakdown of chest types and their values
  4. Source Analysis - analysis of score sources and their distribution
- Created professional styled report template with Total Battle theme
- Implemented chart generation for reports with various visualization types
- Added export functionality for both HTML and PDF formats with page setup options

## 2024-06-01: Enhanced Chart Functionality
- Added TOTAL_SCORE and CHEST_COUNT to chart data selector
- Implemented new Bubble Chart type for 3D data visualization (score vs chest count with efficiency as bubble size)
- Improved chart data display with better axis labels and titles
- Added efficiency metrics (points per chest) for player performance analysis
- Enhanced chart type selector to work with all data types

## 2024-05-31: Fixed Filter Selection Functionality
- Fixed issue with filter selection not working properly
- Implemented signal blocking during filter list updates
- Added proper error handling and data validation
- Fixed visibility toggle for analysis value selection panel

## 2024-06-05: Fixed Raw Data Tab Filter Interface
- Replaced the FilterArea component with a direct implementation matching the Analysis tab
- Ensured both tabs use the same filter UI structure and pattern
- Made select specific values work correctly in the Raw Data tab
- Fixed column population and value list selection in both tabs
- Removed dependency on the FilterArea component
- Enhanced the toggle_value_selection methods to handle different state parameter types

## 2024-06-11: Improved GUI Layout and Chart Customization
- Optimized filter selection areas in both Raw Data and Analysis tabs:
  - Made value selection lists expand to use all available vertical space
  - Applied proper stretch factors to QListWidget and parent containers
  - Reduced spacer stretch to prioritize functional elements
  - Used QSizePolicy to ensure proper widget expansion
  
- Completely redesigned the Charts tab:
  - Removed the unused placeholder widget
  - Added comprehensive chart controls grouped in a "Chart Customization" panel
  - Implemented data column selection for different metrics
  - Added sorting controls by column and direction
  - Added result limiting with "top N" filtering
  - Added display options for value labels and grid lines
  - Implemented direct chart display without the need for dynamic widget insertion
  - Added chart saving functionality with multiple format support

- Enhanced chart visualization:
  - Updated the update_chart method to handle all new customization options
  - Improved chart styling with better spacing and formatting
  - Added bold text for value labels
  - Implemented proper positioning for data point labels
  - Added wedge properties for better pie chart appearance
  - Ensured consistent styling across all chart types
  - Made value display optional and controlled by user preference

## 2024-07-05: Enhanced German Character Encoding Handling
- Implemented an advanced scoring system to automatically select the optimal encoding for German text
- Each encoding is evaluated based on:
  - Whether it preserves proper German characters (highest priority)
  - The count of replacement characters (fewer is better)
  - Default fallback prioritizing German-friendly encodings
- Completely removed all specific name patterns (like "Jäger", "Müller")
- Replaced pattern matching with a linguistic approach based on character adjacency in German:
  - Adjacent character analysis to determine most likely umlaut ('ä', 'ö', 'ü') based on surrounding letters
  - Identified common contexts where each German umlaut typically appears (e.g., 'ä' often appears before 'r')
  - Added common prefixes for each umlaut (e.g., 'sch' before 'ä' or 'ö', 'kr' before 'ü')
- Implemented a multi-pass correction strategy:
  - First pass: Check for and preserve already correct German characters
  - Second pass: Apply context-sensitive replacements based on surrounding letters
  - Third pass: Apply prefix/suffix analysis to determine appropriate umlauts
  - Final pass: Default replacements for any remaining issues
- Unified handling of all replacement character types (Unicode replacement character and question marks)
- Enhanced debugging with detailed logging of encoding selection process

## Next Steps
- Test the application with different CSV files to ensure consistent behavior with new chart customization options
- Consider adding more chart types (scatter plots, histograms, etc.)
- Look for other UI layout improvements that could enhance user experience
- Consider adding chart presets for common visualization scenarios
- Explore options for advanced chart interactions (tooltips, zoom, etc.)

## Application Structure
- The application uses a tab-based interface with Import, Raw Data, Analysis, Charts, and Report tabs
- Data is loaded from CSV files and displayed in tables
- Filtering is implemented using QSortFilterProxyModel
- Analysis tab provides statistical insights with various analysis views
- Charts tab offers customizable visualizations using matplotlib
- Report tab generates comprehensive reports with charts, tables, and statistics

## Key Components
- MainWindow: Main application window with tab interface
- ImportArea: Widget for importing CSV files
- DataTable: Custom table model for displaying data
- FilterBox: Widget for filtering data
- AnalysisTab: Widget for analyzing data
- ChartTab: Widget for generating charts
- ReportTab: Widget for generating reports

## Recent Fixes
- Fixed duplicate toggle_analysis_value_selection methods
- Fixed analysis_column_selector population
- Fixed analysis_value_panel visibility toggling
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output

## 2024-06-04: UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Verified proper detection of German umlauts in CSV files
  - Confirmed automatic fixing of garbled German characters
  - Ensured prioritization of German-friendly encodings when umlauts are detected
  - Maintained proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Notes
- The Report tab is only enabled after data is loaded
- Reports are generated based on the current analysis results
- PDF export requires the QPrinter module from PySide6.QtPrintSupport
- Chart generation uses matplotlib to create temporary image files
- HTML reports use a dark theme matching the application's UI

## Current Task Status
- Fixed the Analysis tab to display processed data instead of raw data 
- Identified and removed a duplicate `update_analysis_view` method that was overriding the correct implementation
- Added detailed debug logging to the `update_analysis_view` method to trace data flow
- Verified the fix works correctly through testing
- Confirmed that the app now correctly shows analyzed data in the Analysis tab
- Updated the app_report.mdc file with information about the fixes

## File Structure
- src/
  - modules/
    - mainwindow.py - Contains the MainWindow class and UI logic
    - dataprocessor.py - Contains the DataProcessor class for data processing and analysis
    - models.py - Contains custom models for tables and data
    - ui/ - UI-related components
    - style/ - Styling and theme components
  - utils/
    - configuration.py - Configuration management
    - helpers.py - Helper functions
  - total-battle-analyzer.py - Main application entry point
- data/ - Contains sample data files
- docs/ - Documentation
  - app_report.mdc - Comprehensive report about the application
  - memory.mdc - This file
  - bugfixing.mdc - Bug tracking and fixes
- tests/ - Test scripts and data

## Previous Tasks
- Created test scripts to verify analysis functionality
- Added debug logging to help diagnose and fix issues
- Researched how the DataProcessor.analyze_data method works
- Implemented various test scripts to trace data flow

## Important Components
- MainWindow - Main application window with UI setup and event handling
- DataProcessor - Handles loading, processing, and analyzing data
- CustomTableModel - Custom model for displaying tabular data
- MplCanvas - Matplotlib integration for chart creation

## Known Issues
- ✅ Analysis tab showing raw data instead of processed analysis (FIXED)

## Notes
- The application follows a structure where the MainWindow contains UI logic and delegates data processing to DataProcessor
- The DataProcessor.analyze_data method returns a dictionary of DataFrames with various analysis types
- The duplicate method was causing the app to display raw data instead of processed data
- Debug logging was added to trace the data flow in the update_analysis_view method
 