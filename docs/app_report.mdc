---
description: Total Battle Analyzer - Application Report
globs: *.py
alwaysApply: false
---
# Total Battle Analyzer - Application Report

## Overview
The Total Battle Analyzer is a desktop application built with PySide6 that allows users to import, view, analyze, and visualize data from the Total Battle game. It provides a user-friendly GUI with multiple tabs for different functionality.

## Core Components

### User Interface
- **Main Window**: QMainWindow-based interface with multiple tabs
- **Tabs**:
  - Import: Drag & drop interface for CSV file importing
  - Raw Data: Table view of imported data with filtering
  - Analysis: Statistical analysis of the data
  - Charts: Visualization of data using matplotlib
- **Multiple import methods**: Drag-and-drop, file menu import option, and direct button click functionality for improved usability

### Data Processing
- **DataProcessor**: Handles loading and analyzing CSV data
  - Supports multiple file encodings (UTF-8, Latin-1, Windows-1252)
  - Processes and transforms data for analysis
  - Provides extensive error checking and reporting
- **CustomTableModel**: Custom model for displaying tabular data
- **CSV parsing**: Support for multiple file encodings (UTF-8, Latin-1, Windows-1252)
- **Data transformation**: Processing raw data into meaningful analytics
- **Aggregation**: Calculating totals, averages, and counts
- **Sorting and filtering**: Arranging data for better analysis

### Visualization
- **MplCanvas**: Matplotlib integration for creating charts and graphs
  - Supports bar charts, pie charts, and line charts
  - Dynamically generates visualizations based on data selection
- **Customized Matplotlib integration**: Dark theme compatible charts
- **Multiple chart types**: Bar charts, pie charts, and line charts
- **Time series analysis**: Tracking scores across dates
- **Player comparisons**: Comparing performance across players

### User Experience
- **DropArea**: Custom widget for handling file drops
  - Supports drag & drop import of CSV files with visual feedback
  - Validates file extensions during drag operations
  - Changes border color to provide visual cues during drag
  - Provides fallback file selection dialog
  - Cross-platform compatibility with Windows-specific optimizations
- **StyleManager**: Manages application styling and theming
  - Provides consistent dark theme across the application
  - Enhances readability and visual appeal
- **Responsive feedback**: Status bar updates and dialog notifications
- **Error handling**: Graceful error management with user-friendly messages
- **Cross-platform compatibility**: Windows-specific optimizations
- **Multiple import options**: Providing users with flexible ways to import data through File menu, buttons, and drag-and-drop

## File Structure
- `src/total-battle-analyzer.py`: Main application file
- `pyproject.toml`: Project dependencies and configuration
- `docs/`: Documentation and development history

## Dependencies
- PySide6: 6.8.2.1 (Qt-based GUI framework)
- matplotlib: 3.10.1 (Visualization library) 
- pandas: 2.2.3 (Data analysis library)
- Python standard libraries: pathlib, datetime, csv, etc.

## Recent Changes
- Fixed compatibility issue between matplotlib and PySide6:
  - Configured matplotlib to use the QtAgg backend
  - Updated imports to use compatible modules
- Enhanced CSV file importing with support for multiple encodings:
  - Added automatic detection for UTF-8, Latin-1, ISO-8859-1, and Windows-1252
  - Improved error handling for encoding issues
- Fixed data handling issues:
  - Corrected pandas DataFrame boolean evaluation
  - Updated QSortFilterProxyModel API usage for compatibility with PySide6 6.8.2.1
- Improved drag and drop functionality:
  - Completely refactored the drag and drop implementation
  - Added proper MIME data handling and debugging
  - Added support for mixed file selections (filtering for CSV files)
  - Fixed case sensitivity issues with file extension checking
  - Added visual feedback during drag operations
  - Enhanced Windows compatibility with specialized path handling
  - Implemented robust error tracing and recovery
  - Added detailed diagnostic logging
- Comprehensive UI refactoring:
  - Restructured tab creation and widget initialization
  - Improved error handling for data loading
  - Enhanced visualization options with multiple chart types
  - Added detailed progress and status reporting
  - Improved filtering in the Raw Data tab
- Added file menu with import option (Ctrl+O shortcut)
- Added explicit import button in the drop area
- Improved visual feedback during file operations
- Support for multiple file encodings
- Enhanced error handling with detailed reporting
- Cross-platform compatibility improvements

## Application Flow
1. User launches the application
2. User imports data via drag & drop or file selection in the Import tab
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. Results can be exported as CSV files for further analysis

## Technical Notes
- The application uses a dark theme for better visibility
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- Drag and drop implementation follows Qt event handling best practices:
  - Proper filtering of file types before accepting drags
  - Visual feedback during valid drag operations
  - Comprehensive event debugging and logging
  - Explicit handling of MIME data and URL processing
  - Platform-specific path handling and normalization
  - Enhanced Windows compatibility with specialized event handling
  - Exception-safe implementation to prevent crashes
  - Multiple fallback strategies for file path extraction
- **File format handling**: The application attempts to open files with multiple encodings, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized dark theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility

## Drag and Drop Implementation

The application implements a robust drag and drop system with multiple fallbacks:

1. **Visual feedback**: The drop area highlights when valid files are dragged over it
2. **Multiple handlers**: Both the DropArea widget and MainWindow handle drag and drop events
3. **File validation**: Checks for CSV file extension and data validity
4. **Error recovery**: Graceful handling of invalid files and format issues
5. **Alternative import methods**: File menu and button options as reliable alternatives to drag and drop

## Improvements and Optimizations

1. **Redundant import methods**: Added File menu and button options as reliable alternatives to drag and drop
2. **Event handling improvements**: Enhanced drag and drop event handlers with better state management
3. **Visual feedback**: Clearer indication of file import status and options
4. **Cross-platform compatibility**: Special adjustments for Windows file path handling
5. **User guidance**: Improved instructions explaining all available import options 