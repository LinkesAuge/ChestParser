---
description: 
globs: 
alwaysApply: false
---
---
description: Total Battle Analyzer - Application Report
globs: *.py
alwaysApply: false
---
# Total Battle Analyzer - Application Report

## Overview
The Total Battle Analyzer is a desktop application built with PySide6 that allows users to import, view, analyze, and visualize data from the Total Battle game. It provides a user-friendly GUI with multiple tabs for different functionality. The application features a dark blue and gold color theme inspired by the Total Battle game UI.

## Features
- CSV file import via multiple methods:
  - Menu bar (File > Import CSV)
  - Button in the dedicated import area
- Raw data viewing with filtering capabilities
- Data analysis with customizable filters
- Chart generation and visualization with extensive customization options:
  - Bar charts with customizable colors for each bar
  - Horizontal bar charts for better readability with long labels
  - Pie charts with distinct color segments
  - Line charts for trend analysis
- Comprehensive report generation with export to HTML/PDF
- Export functionality for analysis results
- Total Battle-inspired UI theme with dark blue and gold accents
- Robust error handling and user-friendly feedback

## Recent Improvements
- Fixed double file dialog issue when importing CSV files
- Fixed overlapping charts in the charts tab
- Fixed missing background color in reports
- Added missing export_report method for report exporting
- Enhanced chart visualization with distinct colors for different data points
- Improved file dialog handling to prevent duplicate dialogs
- Added debounce mechanism for file loading to improve stability
- Enhanced MplCanvas class with better style application methods
- Fixed method name mismatch in MainWindow initialization ensuring proper tab disabling on startup
- Added missing set_config_manager method to ImportArea class for proper configuration handling
- Implemented enhanced double file dialog prevention with class-level flags and improved signal management
- Enhanced report chart generation with consistent multi-color styling across all chart types
- Fixed missing update_available_measures and update_sort_options methods for chart configuration
- Implemented missing connect_signals method to properly connect all UI signals
- Fixed QAction import error by moving it from QtWidgets to QtGui module
- Implemented missing export functionality for Raw Data and Analysis tabs
- Restored missing report generation methods and fixed signal connections for proper application functionality
- Fixed bar chart duplicate number labels issue by clearing existing text objects before adding new ones
- Fixed line chart functionality for both date and non-date categories with proper data visualization
- Fixed code structure issues in chart generation with removal of duplicate implementations
- Enhanced pie chart styling with consistent text color handling
- Improved chart text positioning and formatting across all chart types
- Completely rewrote the chart system with clear separation of styling and rendering logic
- Fixed signal disconnection warnings with proper signal existence checks and enhanced error handling
- Implemented missing export methods for raw data and analysis data with comprehensive error handling
- Improved signal connection safety with conditional checks and proper exception handling
- Enhanced export functionality with dynamic filename generation and proper path handling
- Fixed Charts tab not displaying data after chart system rewrite by resolving duplicate method implementations and category format mismatches
- Fixed NoneType error during chart initialization at startup by adding proper null checks for analysis_results
- Fixed player grouping in charts to show source breakdown (Guild, Battle, Event, etc.) by using player_overview data

## Core Components

### User Interface
- **Main Window**: QMainWindow-based interface with multiple tabs
- **Tabs**:
  - Import: Dedicated area for CSV file importing via button
  - Raw Data: Table view of imported data with filtering
  - Analysis: Statistical analysis of the data
  - Charts: Visualization of data using matplotlib with advanced customization
  - Report: Comprehensive analysis report with export capabilities
- **Multiple import methods**: File menu import option and direct button click functionality for improved usability
- **Styled Components**: 
  - Custom dark blue and gold theme throughout the application
  - Dark blue backgrounds (#1A2742) with gold accents (#D4AF37)
  - Elegant table and tab styling with gold highlights
  - Dark-themed charts with gold and blue color schemes
  - Professional label and component hierarchy
  - Consistent styling across all UI elements
- **Optimized Layout**:
  - Filter areas use full vertical space for better value selection
  - Charts use maximum available space for better visibility
  - Consistent UI elements across all tabs
  - Improved whitespace usage

### Data Processing
- **DataProcessor**: Handles loading and analyzing CSV data
  - Supports multiple file encodings (UTF-8, Latin-1, ISO-8859-1, Windows-1252)
  - Handles different CSV separators (comma, semicolon)
  - Provides manual file reading as a last resort for problematic files
  - Processes and transforms data for meaningful analytics
  - Provides extensive error checking and reporting
- **CustomTableModel**: Custom model for displaying tabular data
- **CSV parsing**: Support for multiple file encodings (UTF-8, Latin-1, Windows-1252)
- **Data transformation**: Processing raw data into meaningful analytics
- **Aggregation**: Calculating totals, averages, and counts
- **Sorting and filtering**: Arranging data for better analysis
- **Chest data analysis**: Specialized analysis for chest-specific data with the analyze_chests_data method

### Visualization
- **MplCanvas**: Matplotlib integration for creating charts and graphs
  - Dark theme charts with gold and blue color scheme
  - Background color: #1A2742
  - Text color: #FFFFFF
  - Grid color: #3A4762
  - Title color: #D4AF37
  - Chart colors: Gold (#D4AF37), Blue (#5991C4), Green (#6EC1A7), Red (#D46A5F)
  - Supports multiple chart types with consistent styling
  - Dynamic chart generation with theme-appropriate colors
  - Supports multiple chart types: bar charts, pie charts, line charts, scatter plots, bubble charts, etc.
  - Dynamically generates visualizations based on data selection
  - Uses Total Battle-inspired color palette with gold and blue tones
- **Enhanced Chart Customization**:
  - Two-step data selection process for improved logical organization:
    - Group By dimension selector (PLAYER, CHEST, SOURCE, DATE)
    - Measure value selector (TOTAL_SCORE, CHEST_COUNT, AVG_SCORE)
  - Dynamic measure options that change based on selected Group By dimension
  - Dynamic sorting options that update based on selected dimension
  - Chart types include: Bar Chart, Horizontal Bar, Pie Chart, Line Chart
  - Intuitive UI with logical control grouping in a side panel layout
  - Sorting options by any column with proper ascending/descending logic
  - Limit results to top N items with proper sorting order application
  - Show/hide value labels and grid lines
  - Advanced export options:
    - Save charts as PNG, JPG, PDF, or SVG
    - Export underlying data as CSV or Excel for spreadsheet applications
  - Maximized chart display area with controls moved to a left side panel
- **Customized Matplotlib integration**: Dark theme compatible charts with gold accents
- **Multiple chart types**:
  - Bar Charts: For comparing values across categories
  - Pie Charts: For showing proportions and percentages
  - Line Charts: For tracking trends over time
  - Scatter Plots: For showing relationships between two variables
  - Bubble Charts: For visualizing three dimensions of data (x, y, and size)
  - Stacked Bar Charts: For showing breakdown of categories
  - Horizontal Bar Charts: Better for categorical data with long labels
- **Time series analysis**: Tracking scores across dates
- **Player comparisons**: Comparing performance across players
- **Enhanced visualization**: Value labels, trend lines, grid lines, and proper styling

### Report Generation
- **HTML and PDF reporting**: Comprehensive reports with charts, tables, and statistics
- **Report types**:
  - Full Report: Comprehensive overview of all data metrics
  - Player Performance: Focus on player achievements and rankings
  - Chest Type Analysis: Analysis of chest value distribution
  - Source Analysis: Analysis of value sources
- **Customizable content**: Options to include/exclude charts, tables, and statistics
- **Export options**: Save reports as HTML or PDF documents
- **Styled reports**: Professional dark theme with gold accents matching the application
- **Report sections**:
  - Overview: General statistics and information about the dataset
  - Player Analysis: Player performance, rankings, and efficiency metrics
  - Chest Analysis: Chest types, values, and distribution
  - Source Analysis: Sources of chests, their values, and distribution
  - Date Analysis: Trends over time with date-based statistics
- **Statistical calculations**:
  - Player efficiency metrics (points per chest)
  - Top performers and rankings
  - Value distribution analysis
  - Trend identification
- **Interactive viewing**: HTML reports with proper formatting and styled sections
- **Professional export**: PDF generation with consistent styling and formatting

### User Experience
- **ImportArea**: Custom widget for file selection
  - Provides clear visual cues for importing files
  - Includes a prominent gold gradient file selection button
  - Displays clean, modern UI with document icon
  - Features gold accent colors and borders for better visibility
  - Provides consistent user experience across platforms
- **StyleManager**: Manages application styling and theming
  - Provides consistent Total Battle-inspired theme across the application
  - Uses dark blue backgrounds with gold accents
  - Enhances readability and visual appeal
  - Creates a cohesive and elegant UI experience
- **Responsive feedback**: Status bar updates and dialog notifications
- **Error handling**: Graceful error management with user-friendly messages
- **Cross-platform compatibility**: Windows-specific optimizations
- **Standardized File Organization**:
  - Uses 'data/imports' directory for loading data files
  - Uses 'data/exports' directory for saving all generated content
  - Saves console output to 'log.txt' for troubleshooting
  - Maintains data integrity with automatic directory creation

## File Structure
- `src/total-battle-analyzer.py`: Main application file
- `pyproject.toml`: Project dependencies and configuration
- `docs/`: Documentation and development history
- `simple_launcher.py`: Custom launcher script for improved error handling and proper styling
- `fixed_app.py`: Advanced launcher with automatic code patching capabilities
- `run_fixed_app.py`: Robust launcher with splash screen and comprehensive error handling

## Dependencies
- PySide6: 6.8.2.1 (Qt-based GUI framework)
- matplotlib: 3.10.1 (Visualization library) 
- pandas: 2.2.3 (Data analysis library)
- ftfy: 6.1.3 (Fixes text encoding issues)
- charset-normalizer: 3.3.2 (Encoding detection)
- unidecode: 1.3.7 (Transliteration for fallback)
- Python standard libraries: pathlib, datetime, csv, etc.

## Recent Changes
- **2024-03-12: Fixed Chart Styling and File Dialog Issues**
  - Fixed chart styling in the Charts tab by enhancing the MplCanvas class with new helper methods:
    - Added apply_style_to_axes method to allow styling specific axes objects
    - Added get_tableau_colors method to provide a consistent color palette for charts
    - Updated the update_chart method to use these new helper methods
    - Improved pie chart handling to limit slices to top 9 + "Others" for better readability
  - Fixed the double file dialog issue by:
    - Modifying the connect_signals method to properly connect the menu action to the ImportArea.open_file_dialog method directly
    - Updating the open_csv_file method to redirect to ImportArea.open_file_dialog for backward compatibility
    - Adding proper error handling for signal connections to prevent crashes when UI components aren't fully initialized
  - Fixed Player Performance report error by updating the create_player_performance_html method to use 'SCORE' instead of 'TOTAL_SCORE'

- **2024-03-12: Implemented Report Generation Functionality**
  - Added the missing `generate_report` method to the MainWindow class to enable report generation
  - Completed the `setup_report_tab` method to properly initialize the report view component
  - Implemented comprehensive report generation with support for different report types:
    - Full Report: Includes all data categories (Player, Chest, Source)
    - Player Performance: Focuses on player-specific data and statistics
    - Chest Type Analysis: Focuses on chest-specific data and statistics
    - Source Analysis: Focuses on source-specific data and statistics
  - Added support for customizable report content with options to include/exclude:
    - Charts: Visual representations of data using various chart types
    - Tables: Tabular data showing detailed information
    - Statistics: Key metrics and highlights for each data category
  - Implemented helper methods for generating different report sections:
    - `_generate_charts_section`: Creates chart images for the report
    - `_generate_tables_section`: Creates HTML tables from DataFrames
    - `_generate_stats_section`: Creates statistical summaries
    - Category-specific statistics methods for player, chest, and source data
  - Enhanced the report view with a welcome message and instructions
  - Ensured proper HTML styling with CSS for professional-looking reports
  - Fixed the export functionality to properly save reports as HTML or PDF
  - Added error handling and status updates throughout the report generation process

- **2024-03-12: Fixed Missing Chart Generation in Reports**
  - Implemented the missing generate_chart_for_report method to create chart images for reports
  - Updated all report HTML generation methods to use actual charts instead of placeholder text
  - Added support for multiple chart types: Bar Chart, Pie Chart, Stacked Bar Chart, and Bubble Chart
  - Implemented chart generation for all data categories: PLAYER, CHEST, SOURCE, and DATE
  - Enhanced chart styling and formatting to be consistent with the application theme
  - Ensured charts are saved as temporary image files and included in HTML reports
  - Improved the visual quality of reports with professional-looking charts

- **2024-03-12: Fixed ImportArea Button Connection Error**
  - Fixed application startup error related to ImportArea button connection
  - Updated connect_signals method to use the correct button name: self.import_area.select_button
  - Fixed ImportArea initialization with correct parameters
  - Connected ImportArea.fileSelected signal to MainWindow.load_csv_file for proper signal flow
  - Application now starts correctly without AttributeError and import functionality works properly

- **2024-03-12: Fixed Analysis Tab Button Name Mismatch**
  - Fixed application startup failure caused by AttributeError: 'MainWindow' object has no attribute 'analysis_select_all_button'
  - Identified naming inconsistency between button creation in setup_analysis_tab and signal connection in connect_signals
  - Updated connect_signals method to use the correct button names matching those defined in setup_analysis_tab
  - Ensured consistent naming convention across setup method and signal connections
  - Improved application stability and error handling
  - Enabled proper functionality of Analysis tab filter buttons

- **2024-07-15: Fixed Raw Data Tab Export Bug**
  - Fixed issue where the Export to CSV button in the Raw Data tab wasn't working
  - Implemented proper proxy model for the Raw Data tab to match the Analysis tab
  - Updated filter handling to work correctly with the proxy model
  - Ensured consistent export functionality between Raw Data and Analysis tabs
  - Improved error handling and feedback throughout the export process
  - Made both tabs use the same sorting and filtering infrastructure

- **2024-07-15: Enhanced Export Functionality**
  - Added Export to CSV functionality for both Raw Data and Analysis tabs
  - Added Export buttons at the bottom of filter panels for easy access
  - Implemented export of filtered data to preserve user's current view
  - Ensured proper handling of German umlauts in exported CSV files
  - Added comprehensive error handling and user feedback
  - Made export functionality consistent across all tabs (Raw Data, Analysis, Charts)

- **2024-07-14: UI Usability Improvements**
  - Made all chart controls update the chart immediately without requiring the "Apply Changes" button
  - Enlarged spinbox up/down buttons throughout the application for better visibility and usability
  - Made tabs other than Import non-clickable until a CSV file is successfully loaded
  - Applied consistent styling to spinbox buttons across the entire application
  - Added hover effects to spinbox buttons for better user feedback
  - Improved the tab disabling visual feedback with greyed-out styling
  - Enhanced status bar messages to show the loaded file name
- Redesigned Charts tab with an improved Two-Step Data Selection Process:
  - Replaced the old single-step "Data to Show" dropdown with two logical selections:
    - "Group By" dimension selector (PLAYER, CHEST, SOURCE, DATE)
    - "Measure" value selector (TOTAL_SCORE, CHEST_COUNT, AVG_SCORE, etc.)
  - Enhanced sorting options based on selected Group By dimension
  - Added dynamic measure options that change based on selected Group By dimension
  - Maintained all chart export functionality (image and data exports)
  - Improved usability by eliminating redundancy in chart data selection
  - Enhanced chart title to reflect the selected dimension and measure
  - Fixed visual layout and spacing for better experience
- Refactored path handling throughout the codebase to consistently use pathlib:
  - Replaced os.path.join with pathlib's / operator for path construction
  - Updated file existence checks to use Path.exists()
  - Converted file size checks to use Path.stat().st_size
  - Replaced os.path.abspath with Path.absolute()
  - Updated os.makedirs with Path.mkdir(parents=True, exist_ok=True)
  - Replaced os.path.dirname with Path.parent
  - Updated os.getcwd() with Path.cwd()
  - Replaced os.path.expanduser("~") with Path.home()
  - Improved handling by accepting both string and Path objects in file operation functions
  - Made path handling more robust and platform-independent
- Fixed critical bugs:
  - Resolved issue with Analysis tab showing raw data instead of properly analyzed data
  - Fixed duplicate update_analysis_view method that was overriding the correct implementation
  - Added proper integration between DataProcessor.analyze_data and the Analysis tab
  - Implemented chart functionality to correctly visualize analyzed data
  - Added detailed debug logging to help diagnose analysis and visualization issues
  - Connected the analysis_selector to the update_analysis_view method to ensure views change correctly
  - Fixed chart updates to properly refresh when analysis filters are applied or reset
  - Ensured proper passing of analyzed data between components
  - Resolved 'dict' object has no attribute 'empty' error in chart generation
  - Fixed duplicated menu items in the menu bar
  - Enhanced German character encoding support for CSV files
  - Fixed chart generation and added comprehensive logging
  - Improved German umlaut detection and handling by identifying and fixing garbled representations
  - Fixed chart column name case sensitivity issue to allow proper selection of DataFrame columns
  - Fixed chart view selection for SOURCE and CHEST columns to automatically select the correct view
  - Improved button text readability by changing text color from black to white
  - Enforced required CSV columns and automatic removal of extra columns
  - Fixed import and export directory handling to use existing folders at project root
  - Fixed value selection panel not appearing when "Select specific values" checkbox was checked in Raw Data tab
  - Fixed missing methods in MainWindow class causing AttributeError exceptions
  - Fixed styling issues with missing dark theme application
  - Enhanced German character encoding detection and automatic fixing in CSV files
  - Created robust custom launchers to ensure proper styling and error handling
  - Fixed ConfigManager.load_config static method implementation
  - Fixed missing methods and tab enabling in load_csv_file method
  - Added populate_filter_columns_dropdown and update_date_range_from_data methods
  - Updated load_csv_file to properly enable all tabs after loading data
  - Fixed tab widget name discrepancy that was causing application startup failure
  - Fixed raw data table attribute name discrepancy in load_csv_file method
  - Fixed analysis selector attribute name discrepancy in load_csv_file method
  - Fixed headers attribute reference in populate_filter_columns_dropdown method
  - Fixed missing data check in update_filter_options method to prevent NoneType errors
  - Fixed missing DataFrame assignment in load_csv_file method to correctly store loaded data
  - Added data availability checks before updating UI elements that depend on loaded data
  - Fixed widget name inconsistency in populate_filter_columns_dropdown method to use correct component name
  - Fixed missing analysis_results initialization in analyze_data method preventing application crashes
  - Implemented proper data aggregation in analyze_chests_data method for analysis display
  - Enhanced update_date_range_from_data method with robust error handling and detailed logging
  - Added comprehensive error handling and detailed logging in update_analysis_view method
  - Enhanced update_filter_options method with proper error handling and execution tracking
  - Fixed infinite loop in update_filter_options by blocking signals during UI component updates
  - Fixed infinite recursion in update_analysis_filter_options method
  - Fixed missing value list population in update_analysis_filter_options method
  - Fixed horizontal bar chart implementation to use direct matplotlib plotting
  - Added defensive logging throughout application to precisely identify crash points
  - Verified all fixes with comprehensive testing, ensuring the application runs smoothly
  - Enhanced German umlaut handling with multi-tiered approach for consistent character display
  - Implemented robust detection and correction of encoding issues for player names with umlauts
  - Added targeted fixes for common German names with encoding problems (e.g., "Krümelmonster", "Müller")
  - Ensured consistent display of all German character names regardless of original encoding
  - Improved preservation of properly formatted German umlauts to prevent "Feldjäger" from being mangled
  - Prioritized German-friendly encodings by default for non-ASCII text files
  - Added special handling for known German name patterns to ensure consistent display
  - Reduced console debug output by disabling debug mode by default in main components
  - Made debug print statements conditional to improve application performance
  - Completely rewrote German character encoding handling with a fully generalized approach
  - Implemented pattern-based replacements for common German letter combinations without relying on hardcoded names
  - Added automatic preservation of any string with properly encoded German characters
  - Enhanced encoding detection to always prioritize Latin-1 and Windows encodings for German text
  - Improved CSV loading to better handle mixed encoding issues in the same file
  - Fixed critical issue with German character preservation where properly encoded characters like "ä" in "Feldjäger" were being modified
  - Completely refactored German character handling logic to identify correctly encoded characters BEFORE applying any fixes
  - Implemented selective string processing using DataFrame masks to only modify strings that need fixing
  - Added explicit restoration step to ensure all properly encoded German characters remain exactly as in the original data
  - Added extensive debug logging to track German character preservation throughout the processing pipeline
  - Completely overhauled the character encoding handling system with a principled approach to encoding detection
  - Implemented a scoring system to evaluate and select the optimal encoding based on German text quality
  - Replaced all name-specific solutions with context-based linguistic pattern recognition
  - Introduced a clean two-phase approach using temporary columns to fix character encoding issues
  - Added multi-encoding processing to compare results from different encodings before selecting the best one
  - Implemented advanced encoding scoring system that evaluates encodings based on German character preservation, replacement character count, and fallback priorities
  - Completely removed specific name patterns (like "Jäger", "Müller") in favor of a linguistic approach based on common letter patterns in German
  - Enhanced character correction with context-sensitive algorithm that analyzes adjacent character patterns to determine the most appropriate German umlaut
  - Added multi-pass correction strategy with first preserving correct German characters, then context analysis, then prefix/suffix patterns, and finally default handling
  - Improved handling of all replacement character types (Unicode replacement character and question marks) with a unified approach
- UI Layout Improvements:
  - Optimized filter areas in Raw Data and Analysis tabs to use full vertical space
  - Removed unused placeholder in Charts tab and used full area for charts
  - Added extensive chart customization options:
    - Data column selection (SCORE, CHEST_COUNT, TOTAL_SCORE)
    - Sorting options by any column with ascending/descending control
    - Limit results to top N items
    - Toggle value labels and grid display
    - Chart saving functionality (PNG, JPG, PDF, SVG)
  - Improved chart display with better spacing and layout
  - Enhanced label positioning and formatting
  - Added bold text for better readability of chart values
  - Fixed layout changes when toggling "Select specific values" checkbox to maintain static layout
- Implemented comprehensive German umlaut handling with ftfy and charset-normalizer
- Added multi-tiered approach to encoding detection and character fixing
- Implemented pattern-based replacement for common mojibake patterns in German text
- Enhanced CSV export to preserve special characters with proper UTF-8 encoding
- Added detailed debug logging for text encoding processing
- Implemented Unicode normalization for consistent text representation
- Added fallback mechanisms using transliteration when encoding cannot be properly determined
- Improved integration of German umlaut handling throughout the application
- Updated CSV file loading to use enhanced encoding detection and text fixing
- Applied comprehensive text column processing for all imported data
- Ensured all CSV exports properly preserve special characters
- Fixed an issue with CSV reading where umlauts could be improperly detected
- Enhanced error handling for CSV loading and exporting operations
- **2024-07-10: Fixed Report Generation Functionality**
  - Fixed the missing implementation of the `create_full_report_html` method that was causing NoneType errors
  - Implemented a comprehensive Full Report generation with multiple sections:
    - Overview section with key statistics (total players, chest types, scores)
    - Player Performance section with bar charts and data tables
    - Chest Analysis section with pie charts, bar charts, and data tables
    - Source Analysis section with pie charts, bar charts, and data tables
  - Enhanced error handling for missing data with appropriate fallback content
  - Ensured consistent styling across all report types with the Total Battle theme
  - Added proper documentation with parameter descriptions and return values
  - Improved report generation reliability by ensuring all report types have complete implementations
- **2024-07-17: Complete Chart System Rewrite and Signal Connection Improvements**
  - Completely rewrote the chart system with clear separation of styling and rendering logic:
    - Created a centralized `reset_figure_style` method in MplCanvas to ensure consistent styling
    - Implemented specialized methods for styling text elements across all chart types
    - Fixed persistent issues with chart background colors by properly managing Matplotlib's global state
    - Ensured all charts display with the correct themed dark blue background
    - Added proper cleanup of figure styles to prevent global style contamination
    - Separated data handling from chart rendering logic for better code organization
  - Fixed signal connection issues that were causing errors during application startup:
    - Implemented proper signal existence checks to prevent runtime warnings
    - Enhanced error handling for signal disconnection with better exception management
    - Added conditional `hasattr()` checks to verify existence of signal attributes before use
    - Improved signal connection safety with proper try/except blocks
  - Implemented missing export methods for data tables:
    - Added `export_raw_data` method for exporting filtered raw data to CSV
    - Added `export_analysis_data` method for exporting filtered analysis data to CSV
    - Implemented proper handling of filter proxy models to export only filtered data
    - Enhanced export functionality with dynamic filename generation and proper path handling
    - Added consistent error handling and user feedback for all export operations
  - These improvements ensure more stable application behavior, consistent chart styling, and reliable export functionality across all application components.