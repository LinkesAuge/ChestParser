---
description: Total Battle Analyzer - Application Report
globs: *.py
alwaysApply: false
---
# Total Battle Analyzer - Application Report

## Overview
The Total Battle Analyzer is a desktop application built with PySide6 that allows users to import, view, analyze, and visualize data from the Total Battle game. It provides a user-friendly GUI with multiple tabs for different functionality. The application features a dark blue and gold color theme inspired by the Total Battle game UI.

## Features
- CSV file import via multiple methods:
  - Menu bar (File > Import CSV)
  - Button in the dedicated import area
- Raw data viewing with filtering capabilities
- Data analysis with customizable filters
- Chart generation and visualization with extensive customization options
- Comprehensive report generation with export to HTML/PDF
- Export functionality for analysis results
- Total Battle-inspired UI theme with dark blue and gold accents

## Core Components

### User Interface
- **Main Window**: QMainWindow-based interface with multiple tabs
- **Tabs**:
  - Import: Dedicated area for CSV file importing via button
  - Raw Data: Table view of imported data with filtering
  - Analysis: Statistical analysis of the data
  - Charts: Visualization of data using matplotlib with advanced customization
  - Report: Comprehensive analysis report with export capabilities
- **Multiple import methods**: File menu import option and direct button click functionality for improved usability
- **Styled Components**: 
  - Custom dark blue and gold theme throughout the application
  - Dark blue backgrounds (#1A2742) with gold accents (#D4AF37)
  - Elegant table and tab styling with gold highlights
  - Dark-themed charts with gold and blue color schemes
  - Professional label and component hierarchy
  - Consistent styling across all UI elements
- **Optimized Layout**:
  - Filter areas use full vertical space for better value selection
  - Charts use maximum available space for better visibility
  - Consistent UI elements across all tabs
  - Improved whitespace usage

### Data Processing
- **DataProcessor**: Handles loading and analyzing CSV data
  - Supports multiple file encodings (UTF-8, Latin-1, ISO-8859-1, Windows-1252)
  - Handles different CSV separators (comma, semicolon)
  - Provides manual file reading as a last resort for problematic files
  - Processes and transforms data for meaningful analytics
  - Provides extensive error checking and reporting
- **CustomTableModel**: Custom model for displaying tabular data
- **CSV parsing**: Support for multiple file encodings (UTF-8, Latin-1, Windows-1252)
- **Data transformation**: Processing raw data into meaningful analytics
- **Aggregation**: Calculating totals, averages, and counts
- **Sorting and filtering**: Arranging data for better analysis
- **Chest data analysis**: Specialized analysis for chest-specific data with the analyze_chests_data method

### Visualization
- **MplCanvas**: Matplotlib integration for creating charts and graphs
  - Dark theme charts with gold and blue color scheme
  - Background color: #1A2742
  - Text color: #FFFFFF
  - Grid color: #3A4762
  - Title color: #D4AF37
  - Chart colors: Gold (#D4AF37), Blue (#5991C4), Green (#6EC1A7), Red (#D46A5F)
  - Supports multiple chart types with consistent styling
  - Dynamic chart generation with theme-appropriate colors
  - Supports multiple chart types: bar charts, pie charts, line charts, scatter plots, bubble charts, etc.
  - Dynamically generates visualizations based on data selection
  - Uses Total Battle-inspired color palette with gold and blue tones
- **Enhanced Chart Customization**:
  - Separate chart type selection from data category selection
  - Chart types include: Bar Chart, Horizontal Bar, Pie Chart, Line Chart
  - Data categories include: Player Totals, Chest Totals, Source Totals, Date Totals
  - Intuitive UI with logical control grouping in a side panel layout
  - Automatic data value selection based on category (e.g., SCORE for Player Totals)
  - Sorting options by any column with proper ascending/descending logic
  - Limit results to top N items with proper sorting order application
  - Show/hide value labels and grid lines
  - Advanced export options:
    - Save charts as PNG, JPG, PDF, or SVG
    - Export underlying data as CSV or Excel for spreadsheet applications
  - Maximized chart display area with controls moved to a left side panel
- **Customized Matplotlib integration**: Dark theme compatible charts with gold accents
- **Multiple chart types**:
  - Bar Charts: For comparing values across categories
  - Pie Charts: For showing proportions and percentages
  - Line Charts: For tracking trends over time
  - Scatter Plots: For showing relationships between two variables
  - Bubble Charts: For visualizing three dimensions of data (x, y, and size)
  - Stacked Bar Charts: For showing breakdown of categories
  - Horizontal Bar Charts: Better for categorical data with long labels
- **Time series analysis**: Tracking scores across dates
- **Player comparisons**: Comparing performance across players
- **Enhanced visualization**: Value labels, trend lines, grid lines, and proper styling

### Report Generation
- **HTML and PDF reporting**: Comprehensive reports with charts, tables, and statistics
- **Report types**:
  - Full Report: Comprehensive overview of all data metrics
  - Player Performance: Focus on player achievements and rankings
  - Chest Type Analysis: Analysis of chest value distribution
  - Source Analysis: Analysis of value sources
- **Customizable content**: Options to include/exclude charts, tables, and statistics
- **Export options**: Save reports as HTML or PDF documents
- **Styled reports**: Professional dark theme with gold accents matching the application

### User Experience
- **ImportArea**: Custom widget for file selection
  - Provides clear visual cues for importing files
  - Includes a prominent gold gradient file selection button
  - Displays clean, modern UI with document icon
  - Features gold accent colors and borders for better visibility
  - Provides consistent user experience across platforms
- **StyleManager**: Manages application styling and theming
  - Provides consistent Total Battle-inspired theme across the application
  - Uses dark blue backgrounds with gold accents
  - Enhances readability and visual appeal
  - Creates a cohesive and elegant UI experience
- **Responsive feedback**: Status bar updates and dialog notifications
- **Error handling**: Graceful error management with user-friendly messages
- **Cross-platform compatibility**: Windows-specific optimizations
- **Standardized File Organization**:
  - Uses 'imports' directory for loading data files
  - Uses 'exports' directory for saving all generated content
  - Saves console output to 'log.txt' for troubleshooting
  - Maintains data integrity with automatic directory creation

## File Structure
- `src/total-battle-analyzer.py`: Main application file
- `pyproject.toml`: Project dependencies and configuration
- `docs/`: Documentation and development history
- `simple_launcher.py`: Custom launcher script for improved error handling and proper styling
- `fixed_app.py`: Advanced launcher with automatic code patching capabilities
- `run_fixed_app.py`: Robust launcher with splash screen and comprehensive error handling

## Dependencies
- PySide6: 6.8.2.1 (Qt-based GUI framework)
- matplotlib: 3.10.1 (Visualization library) 
- pandas: 2.2.3 (Data analysis library)
- Python standard libraries: pathlib, datetime, csv, etc.

## Recent Changes
- Fixed critical bugs:
  - Resolved issue with Analysis tab showing raw data instead of properly analyzed data
  - Fixed duplicate update_analysis_view method that was overriding the correct implementation
  - Added proper integration between DataProcessor.analyze_data and the Analysis tab
  - Implemented chart functionality to correctly visualize analyzed data
  - Added detailed debug logging to help diagnose analysis and visualization issues
  - Connected the analysis_selector to the update_analysis_view method to ensure views change correctly
  - Fixed chart updates to properly refresh when analysis filters are applied or reset
  - Ensured proper passing of analyzed data between components
  - Resolved 'dict' object has no attribute 'empty' error in chart generation
  - Fixed duplicated menu items in the menu bar
  - Enhanced German character encoding support for CSV files
  - Fixed chart generation and added comprehensive logging
  - Improved German umlaut detection and handling by identifying and fixing garbled representations
  - Fixed chart column name case sensitivity issue to allow proper selection of DataFrame columns
  - Fixed chart view selection for SOURCE and CHEST columns to automatically select the correct view
  - Improved button text readability by changing text color from black to white
  - Enforced required CSV columns and automatic removal of extra columns
  - Fixed import and export directory handling to use existing folders at project root
  - Fixed value selection panel not appearing when "Select specific values" checkbox was checked in Raw Data tab
  - Fixed missing methods in MainWindow class causing AttributeError exceptions
  - Fixed styling issues with missing dark theme application
  - Enhanced German character encoding detection and automatic fixing in CSV files
  - Created robust custom launchers to ensure proper styling and error handling
  - Fixed ConfigManager.load_config static method implementation
  - Fixed missing methods and tab enabling in load_csv_file method
  - Added populate_filter_columns_dropdown and update_date_range_from_data methods
  - Updated load_csv_file to properly enable all tabs after loading data
  - Fixed tab widget name discrepancy that was causing application startup failure
  - Fixed raw data table attribute name discrepancy in load_csv_file method
  - Fixed analysis selector attribute name discrepancy in load_csv_file method
  - Fixed headers attribute reference in populate_filter_columns_dropdown method
  - Fixed missing data check in update_filter_options method to prevent NoneType errors
  - Fixed missing DataFrame assignment in load_csv_file method to correctly store loaded data
  - Added data availability checks before updating UI elements that depend on loaded data
  - Fixed widget name inconsistency in populate_filter_columns_dropdown method to use correct component name
  - Fixed missing analysis_results initialization in analyze_data method preventing application crashes
  - Implemented proper data aggregation in analyze_chests_data method for analysis display
  - Enhanced update_date_range_from_data method with robust error handling and detailed logging
  - Added comprehensive error handling and detailed logging in update_analysis_view method
  - Enhanced update_filter_options method with proper error handling and execution tracking
  - Fixed infinite loop in update_filter_options by blocking signals during UI component updates
  - Fixed infinite recursion in update_analysis_filter_options method
  - Fixed missing value list population in update_analysis_filter_options method
  - Fixed horizontal bar chart implementation to use direct matplotlib plotting
  - Added defensive logging throughout application to precisely identify crash points
  - Verified all fixes with comprehensive testing, ensuring the application runs smoothly
- UI Layout Improvements:
  - Optimized filter areas in Raw Data and Analysis tabs to use full vertical space
  - Removed unused placeholder in Charts tab and used full area for charts
  - Added extensive chart customization options:
    - Data column selection (SCORE, CHEST_COUNT, TOTAL_SCORE)
    - Sorting options by any column with ascending/descending control
    - Limit results to top N items
    - Toggle value labels and grid display
    - Chart saving functionality (PNG, JPG, PDF, SVG)
  - Improved chart display with better spacing and layout
  - Enhanced label positioning and formatting
  - Added bold text for better readability of chart values
  - Fixed layout changes when toggling "Select specific values" checkbox to maintain static layout