---
description: 
globs: 
alwaysApply: false
---
---
description: Total Battle Analyzer - Application Report
globs: *.py
alwaysApply: false
---
# Total Battle Analyzer - Application Report

## Overview
The Total Battle Analyzer is a desktop application built with PySide6 that allows users to import, view, analyze, and visualize data from the Total Battle game. It provides a user-friendly GUI with multiple tabs for different functionality. The application features a dark blue and gold color theme inspired by the Total Battle game UI.

## Features
- CSV file import via multiple methods:
  - Menu bar (File > Import CSV)
  - Button in the dedicated import area
- Raw data viewing with filtering capabilities
- Data analysis with customizable filters
- Chart generation and visualization
- Comprehensive report generation with export to HTML/PDF
- Export functionality for analysis results
- Total Battle-inspired UI theme with dark blue and gold accents

## Core Components

### User Interface
- **Main Window**: QMainWindow-based interface with multiple tabs
- **Tabs**:
  - Import: Dedicated area for CSV file importing via button
  - Raw Data: Table view of imported data with filtering
  - Analysis: Statistical analysis of the data
  - Charts: Visualization of data using matplotlib
  - Report: Comprehensive analysis report with export capabilities
- **Multiple import methods**: File menu import option and direct button click functionality for improved usability
- **Styled Components**: 
  - Custom dark blue and gold theme throughout the application
  - Dark blue backgrounds (#1A2742) with gold accents (#D4AF37)
  - Elegant table and tab styling with gold highlights
  - Dark-themed charts with gold and blue color schemes
  - Professional label and component hierarchy
  - Consistent styling across all UI elements

### Data Processing
- **DataProcessor**: Handles loading and analyzing CSV data
  - Supports multiple file encodings (UTF-8, Latin-1, ISO-8859-1, Windows-1252)
  - Handles different CSV separators (comma, semicolon)
  - Provides manual file reading as a last resort for problematic files
  - Processes and transforms data for meaningful analytics
  - Provides extensive error checking and reporting
- **CustomTableModel**: Custom model for displaying tabular data
- **CSV parsing**: Support for multiple file encodings (UTF-8, Latin-1, Windows-1252)
- **Data transformation**: Processing raw data into meaningful analytics
- **Aggregation**: Calculating totals, averages, and counts
- **Sorting and filtering**: Arranging data for better analysis
- **Chest data analysis**: Specialized analysis for chest-specific data with the analyze_chests_data method

### Visualization
- **MplCanvas**: Matplotlib integration for creating charts and graphs
  - Dark theme charts with gold and blue color scheme
  - Background color: #1A2742
  - Text color: #FFFFFF
  - Grid color: #3A4762
  - Title color: #D4AF37
  - Chart colors: Gold (#D4AF37), Blue (#5991C4), Green (#6EC1A7), Red (#D46A5F)
  - Supports multiple chart types with consistent styling
  - Dynamic chart generation with theme-appropriate colors
  - Supports multiple chart types: bar charts, pie charts, line charts, scatter plots, bubble charts, etc.
  - Dynamically generates visualizations based on data selection
  - Uses Total Battle-inspired color palette with gold and blue tones
- **Customized Matplotlib integration**: Dark theme compatible charts with gold accents
- **Multiple chart types**:
  - Bar Charts: For comparing values across categories
  - Pie Charts: For showing proportions and percentages
  - Line Charts: For tracking trends over time
  - Scatter Plots: For showing relationships between two variables
  - Bubble Charts: For visualizing three dimensions of data (x, y, and size)
  - Stacked Bar Charts: For showing breakdown of categories
  - Horizontal Bar Charts: Better for categorical data with long labels
- **Time series analysis**: Tracking scores across dates
- **Player comparisons**: Comparing performance across players
- **Enhanced visualization**: Value labels, trend lines, grid lines, and proper styling

### Report Generation
- **HTML and PDF reporting**: Comprehensive reports with charts, tables, and statistics
- **Report types**:
  - Full Report: Comprehensive overview of all data metrics
  - Player Performance: Focus on player achievements and rankings
  - Chest Type Analysis: Analysis of chest value distribution
  - Source Analysis: Analysis of value sources
- **Customizable content**: Options to include/exclude charts, tables, and statistics
- **Export options**: Save reports as HTML or PDF documents
- **Styled reports**: Professional dark theme with gold accents matching the application

### User Experience
- **ImportArea**: Custom widget for file selection
  - Provides clear visual cues for importing files
  - Includes a prominent gold gradient file selection button
  - Displays clean, modern UI with document icon
  - Features gold accent colors and borders for better visibility
  - Provides consistent user experience across platforms
- **StyleManager**: Manages application styling and theming
  - Provides consistent Total Battle-inspired theme across the application
  - Uses dark blue backgrounds with gold accents
  - Enhances readability and visual appeal
  - Creates a cohesive and elegant UI experience
- **Responsive feedback**: Status bar updates and dialog notifications
- **Error handling**: Graceful error management with user-friendly messages
- **Cross-platform compatibility**: Windows-specific optimizations

## File Structure
- `src/total-battle-analyzer.py`: Main application file
- `pyproject.toml`: Project dependencies and configuration
- `docs/`: Documentation and development history
- `simple_launcher.py`: Custom launcher script for improved error handling and proper styling
- `fixed_app.py`: Advanced launcher with automatic code patching capabilities
- `run_fixed_app.py`: Robust launcher with splash screen and comprehensive error handling

## Dependencies
- PySide6: 6.8.2.1 (Qt-based GUI framework)
- matplotlib: 3.10.1 (Visualization library) 
- pandas: 2.2.3 (Data analysis library)
- Python standard libraries: pathlib, datetime, csv, etc.

## Recent Changes
- Fixed critical bugs:
  - Resolved 'dict' object has no attribute 'empty' error in chart generation
  - Fixed duplicated menu items in the menu bar
  - Enhanced German character encoding support for CSV files
  - Fixed chart generation and added comprehensive logging
  - Improved German umlaut detection and handling by identifying and fixing garbled representations
  - Fixed chart column name case sensitivity issue to allow proper selection of DataFrame columns
  - Fixed chart view selection for SOURCE and CHEST columns to automatically select the correct view
  - Improved button text readability by changing text color from black to white
  - Enforced required CSV columns and automatic removal of extra columns
  - Fixed import and export directory handling to use existing folders at project root
  - Fixed value selection panel not appearing when "Select specific values" checkbox was checked in Raw Data tab
  - Fixed missing methods in MainWindow class causing AttributeError exceptions
  - Fixed styling issues with missing dark theme application
  - Enhanced German character encoding detection and automatic fixing in CSV files
  - Created robust custom launchers to ensure proper styling and error handling
  - Fixed ConfigManager.load_config static method implementation
  - Fixed missing methods and tab enabling in load_csv_file method
  - Added populate_filter_columns_dropdown and update_date_range_from_data methods
  - Updated load_csv_file to properly enable all tabs after loading data
  - Fixed tab widget name discrepancy that was causing application startup failure
  - Fixed raw data table attribute name discrepancy in load_csv_file method
  - Fixed analysis selector attribute name discrepancy in load_csv_file method
  - Fixed headers attribute reference in populate_filter_columns_dropdown method
  - Fixed missing data check in update_filter_options method to prevent NoneType errors
  - Fixed missing DataFrame assignment in load_csv_file method to correctly store loaded data
  - Added data availability checks before updating UI elements that depend on loaded data
  - Fixed widget name inconsistency in populate_filter_columns_dropdown method to use correct component name
  - Fixed missing analysis_results initialization in analyze_data method preventing application crashes
  - Implemented proper data aggregation in analyze_chests_data method for analysis display
  - Enhanced update_date_range_from_data method with robust error handling and detailed logging
  - Added comprehensive error handling and detailed logging in update_analysis_view method
  - Enhanced update_filter_options method with proper error handling and execution tracking
  - Fixed infinite loop in update_filter_options by blocking signals during UI component updates
  - Fixed infinite recursion in update_analysis_filter_options method
  - Fixed missing value list population in update_analysis_filter_options method
  - Fixed horizontal bar chart implementation to use direct matplotlib plotting
  - Added defensive logging throughout application to precisely identify crash points
  - Verified all fixes with comprehensive testing, ensuring the application runs smoothly
- Enhanced user experience and interface:
  - Improved navigation with disabled tabs when no data is loaded
  - Provided clear visual cues about which features are available
  - Added appropriate status messages to guide users through the workflow
  - Created a more intuitive application flow with proper tab state management
  - Enhanced visual indication for disabled tabs with lighter text color
  - Refined gold color balance - brighter accents for UI elements and darker gradients for buttons
  - Improved application launching with splash screen and better error handling
  - Added additional custom launchers for different scenarios
- Enhanced Analysis tab with advanced filtering and comprehensive player data:
  - Added the same filtering capabilities from Raw Data tab to the Analysis tab
  - Added date range filtering with start and end date pickers
  - Implemented multi-selection capability for category filters
  - Added toggle for value selection panel visibility
  - Added Select All/Deselect All buttons for filter values
  - Created new "Player Overview" view that displays:
    - Total score per player
    - Total chest count per player
    - Score breakdown by chest type for each player
  - Made "Player Overview" the default view when opening the Analysis tab
  - Improved default view implementation by making "Player Overview" the first item in the view dropdown
  - Modified workflow to automatically show the Analysis tab with Player Overview after opening a CSV file
  - Fixed issue with "Player Overview" selection not persisting when chart data changed
  - Fixed chart generation for Player Overview view to correctly use TOTAL_SCORE and CHEST_COUNT columns
  - Improved export functionality to handle the new view types
  - Enabled separate filtering for analysis views with proper reprocessing of data
- Enhanced Raw Data tab with advanced filtering and export features:
  - Added date range filtering with start and end date pickers
  - Implemented multi-selection capability for category filters
  - Added export functionality to save filtered data as CSV
  - Improved filter status reporting in the status bar
  - Enhanced UI layout for better organization of filter controls
  - Implemented split UI with movable divider to maximize table viewing space
  - Added show/hide functionality for value filters with a space-efficient design
  - Implemented select all/deselect all capability for filter values
  - Made all values selected by default for better usability
  - Added toggle between filtering with all values vs. specific selections
  - Fixed value selection panel to correctly show/hide based on checkbox state
  - Confirmed all filtering functionality works as expected with extensive testing
- Implemented Total Battle-inspired UI theme:
  - Created a dark blue and gold color scheme matching the game's aesthetic
  - Enhanced button styling with gold gradients
  - Applied elegant styling to all UI components
  - Improved chart visualization with themed colors
  - Added proper spacing and visual hierarchy to the interface
- Fixed compatibility issue between matplotlib and PySide6:
  - Configured matplotlib to use the QtAgg backend
  - Updated imports to use compatible modules
- Enhanced CSV file importing with support for multiple encodings:
  - Added automatic detection for UTF-8, Latin-1, ISO-8859-1, and Windows-1252
  - Improved error handling for encoding issues
  - Added support for different CSV separators (comma, semicolon)
  - Implemented manual file reading for problematic files
  - Added intelligent detection and repair of garbled German characters
  - Improved encoding detection logic to better handle German umlauts
  - Enhanced the DataProcessor.load_csv method to return success status and error messages
  - Fixed error in load_csv_file method to properly handle file selection dialogs
- Fixed data handling issues:
  - Corrected pandas DataFrame boolean evaluation
  - Updated QSortFilterProxyModel API usage for compatibility with PySide6 6.8.2.1
- Completely redesigned the file import approach:
  - Removed all drag and drop functionality due to system-level compatibility issues
  - Implemented a reliable persistent file selection panel at the top of the window
  - Renamed DropArea to ImportArea with focus solely on file selection button
  - Enhanced visual feedback with detailed status messages during file operations
  - Simplified UI with clear focus on reliable import methods
- Comprehensive UI refactoring:
  - Added menu bar with File and Help menus
  - Enhanced visual feedback during file operations
  - Improved error handling for data loading
  - Enhanced visualization options with multiple chart types
  - Added detailed progress and status reporting
  - Improved filtering in the Raw Data tab
  - Removed diagnostic tools and simplified the interface
- Added configuration management system:
  - Implemented ConfigManager class for persistent application settings
  - Created config.ini file with default settings for themes, directories, and preferences
  - Added automatic creation of import and export directories
  - Integrated file dialogs with saved directory preferences for better user experience
  - Updated ImportArea to use configured import directories
  - Enhanced export functionality to use configured export directories
  - Added ability to remember last used directories for file operations
  - Added configuration options for German encodings and other CSV settings
  - Enhanced ConfigManager to properly handle static method calls
  - Added JSON-based configuration storage

### April 2024
- Improved chart functionality:
  - Added new chart types: Scatter Plot, Stacked Bar Chart, and Horizontal Bar Chart
  - Added options to sort data by value or name in ascending or descending order
  - Added ability to limit charts to show only top N items
  - Added option to toggle value labels on charts
  - Added chart style presets (Default, Minimal, Detailed)
  - Implemented chart export functionality to PNG, JPG, PDF, and SVG formats
  - Enhanced chart colors and presentation for better visual appeal
- Fixed chart generation for Player Overview view to correctly use `TOTAL_SCORE` and `CHEST_COUNT` columns
- Workflow now automatically shows the Analysis tab with Player Overview after opening a CSV file
- Fixed the issue with "Player Overview" selection not persisting when chart data changed
- Made "Player Overview" the first item in the view dropdown
- Improved export functionality to handle the new view types
- Enabled separate filtering for analysis views with proper reprocessing of data
- Fixed missing methods in MainWindow class:
  - Added `clear_filters` method to reset all filter settings in the Raw Data tab
  - Added `export_raw_data` method to export filtered data to CSV files
  - Added `select_all_values` and `deselect_all_values` methods for value list selection
  - Added `toggle_analysis_value_selection` method to show/hide the analysis value selection panel
  - Added `filter_analysis_data` method to apply filters to analysis data
  - Added `clear_analysis_filters` method to reset analysis filters
  - Added `select_all_analysis_values` and `deselect_all_analysis_values` methods for analysis value list
  - Fixed all button connections to use the proper methods
  - Ensured consistent filtering behavior across Raw Data and Analysis tabs

### May 2024
- Fixed critical styling and startup issues:
  - Created multiple custom launcher scripts to ensure proper application startup
  - Fixed the dark theme not being applied correctly
  - Enhanced error handling during application startup
  - Added splash screen for better user feedback during launching
  - Fixed window visibility issues
  - Created visual loading indicators to enhance user experience
  - Improved error reporting with detailed dialog boxes
- Enhanced CSV file handling for special characters:
  - Improved handling of German umlauts in CSV files
  - Enhanced encoding detection with better heuristics
  - Fixed automatic character conversion for common encoding issues
  - Added regex-based detection of garbled character patterns
  - Implemented automatic fixing of common garbled German character patterns
  - Improved the DataProcessor.load_csv method to return success status and detailed error messages
  - Fixed load_csv_file method to properly handle file selection dialogs
- Added custom launchers for different scenarios:
  - `simple_launcher.py`: Straightforward launcher focusing on basic styling and error handling
  - `fixed_app.py`: Advanced launcher with automatic code patching capabilities
  - `run_fixed_app.py`: Comprehensive launcher with splash screen and extensive error handling
- Enhanced configuration management:
  - Fixed ConfigManager.load_config static method implementation
  - Updated configuration storage to use JSON format
  - Improved default configuration handling
- Fixed value selection functionality in both the Analysis and Raw Data tabs:
  - Fixed the Analysis tab's "Select specific values" feature to correctly populate the value list
  - Fixed the Raw Data tab's "Select specific values" feature that was automatically unchecking itself
  - Updated the update_filter_options method to properly respect checkbox state and show values
  - Added comprehensive error handling for value list population
  - Implemented proper sorting of values for better user experience
  - Enhanced both tabs to use the same reliable pattern for value selection
  - Added detailed logging to track the state of UI components during filtering
- Fixed horizontal bar chart implementation:
  - Replaced the pandas plotting approach with direct matplotlib plotting
  - Fixed issue where horizontal bar charts were throwing errors about duplicate height parameters
  - Implemented proper labeling and formatting for horizontal bar charts
  - Ensured consistent styling with other chart types
- Fixed chart errors:
  - Fixed horizontal bar charts by correcting undefined variable reference
  - Fixed stacked bar charts to handle cases when no chest columns are available in player overview
  - Added robust fallback to regular bar charts when stacked charts cannot be created
  - Enhanced error handling for all chart types with clear user feedback
  - Improved chart data validation to prevent "no numeric data to plot" errors
- Enhanced player overview analysis:
  - Added source score breakdown to player overview view
  - Added pivot tables to break down scores by both chest types and sources
  - Renamed source columns with clear "SOURCE_" prefix for better identification
  - Improved data merging to create a comprehensive player overview
  - Enhanced logging of analysis columns for better debugging
  - Refined player overview to focus only on source scores by removing chest type breakdown
  - Improved source column naming with more readable format (using original source names)
  - Updated stacked bar chart to display source scores instead of chest type scores
  - Added legend title for better clarity in stacked bar charts
  - Removed "Source: " prefix from column names for a cleaner, more compact display
  - Added default sorting to player overview by TOTAL_SCORE in descending order
  - Fixed issue where Player Overview required applying a filter to display data
  - Enhanced update_analysis_view method to ensure table model is properly set and visible
  - Added robust tab selection logic to show the Analysis tab when needed
  - Fixed incorrect parameter passing in clear_analysis_filters method
  - Fixed issue where Player Overview data wasn't displayed automatically after loading CSV
  - Added automatic filter application during CSV loading to initialize view correctly
  - Enhanced filter_analysis_data to auto-select a filter column when none is selected
  - Updated DataProcessor.analyze_data method to use SOURCE columns instead of CHEST columns
  - Fixed issue where switching between views required reapplying filter to see data
  - Ensured view switching works correctly by automatically applying filters when changing views
- Improved UI usability:
  - Enhanced tab title styling to make active tabs more prominent with bold gold text
  - Improved visual distinction between active and inactive tabs
  - Fixed contrast issues with tab titles to ensure better readability
  - Consistent styling across all UI components for better visual hierarchy
  - Enhanced inactive tab visibility by using normal text color instead of grey
  - Reserved gray text only for disabled tabs (when no CSV is loaded)

### June 2024
- Implemented comprehensive Report tab functionality:
  - Added dedicated Report tab with custom UI for generating and exporting reports
  - Created four report types: Full Report, Player Performance, Chest Type Analysis, and Source Analysis
  - Implemented HTML report generation with Total Battle theme styling
  - Added export functionality to save reports as HTML or PDF files
  - Integrated chart generation into reports for visual data representation
  - Added detailed statistics and data tables in reports
  - Enhanced user experience with clear report type selection and export options
  - Fixed indentation issues in report generation and export methods
  - Added proper error handling with try-except blocks throughout the report functionality
  - Ensured proper tab initialization with Import tab enabled by default
  - Implemented proper chart generation for reports with customized styling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the fixed launcher with automatic code patching
   ```bash
   python fixed_app.py
   ```

4. **Robust Launcher with Splash Screen**: Use the most comprehensive launcher
   ```bash
   python run_fixed_app.py
   ```

## Technical Notes
- The application uses a Total Battle-inspired dark blue and gold theme for better visibility and aesthetic appeal
- Custom table models are used for efficient data display
- Data filtering is implemented with QSortFilterProxyModel
- Matplotlib is integrated with PySide6 for charts with custom styling
- CSV files with special characters (like umlauts) are supported through multiple encoding options
- Proper pandas DataFrame handling is implemented with null/empty checks
- PySide6 API changes are addressed for compatibility
- **File format handling**: The application attempts to open files with multiple encodings and separators, providing robust import capabilities
- **Exception handling**: Comprehensive try-except blocks throughout the code for stability
- **Event-driven architecture**: Qt signals and slots for communication between components
- **Custom table model**: Tailored for displaying the specific data formats
- **Style management**: Centralized Total Battle-inspired theme styling
- **Multiple file import options**: Redundant import methods for improved usability and platform compatibility
- **Type-specific validation**: Different handling for dictionaries vs DataFrames when checking for empty/None values
- **German character support**: Enhanced detection and handling of German umlauts with prioritized encodings
  - Intelligently detects both properly formatted and garbled German umlauts
  - Automatically fixes common encoding issues with German special characters
- **Custom launchers**: Multiple launcher scripts with different capabilities for various scenarios
  - Basic launcher with theme application
  - Advanced launcher with automatic code patching
  - Comprehensive launcher with splash screen and detailed error handling
- **ConfigManager enhancements**: 
  - Static method implementation for configuration loading
  - JSON-based configuration storage
  - Default configuration handling for first-time use
- **HTML/PDF Report generation**:
  - Uses QTextBrowser for HTML rendering
  - QPrinter for PDF generation
  - Tempfile for storing chart images during report generation
  - Professional styling with CSS

## UI Components
1. **Menu Bar**:
   - File menu (Import, Export, Exit)
   - Help menu (About)

2. **Tab Interface**:
   - Import tab with ImportArea and instructions
   - Raw Data tab with data table and filters
   - Analysis tab with analysis tools and results
   - Charts tab with chart controls and display area
   - Report tab with report generation and export options

3. **Status Bar**:
   - Displays application status and messages

## Key Features Implementation
1. **CSV Import**:
   - Multiple reliable import methods ensure functionality across different systems
   - Robust error handling for various file formats and encodings
   - Visual feedback for import process
   - Support for different CSV separators and encodings

2. **Data Filtering**:
   - Dynamic filter controls based on data columns
   - Multiple value selection for each category
   - Date range filtering for time-based analysis
   - Real-time filtering with visual feedback
   - One-click filter clearing
   - Export of filtered data to CSV files

3. **Data Analysis**:
   - Customizable analysis parameters
   - Statistical analysis functions
   - Result sorting and grouping
   - Comprehensive metrics including efficiency calculations

4. **Chart Generation**:
   - Multiple chart types for different visualization needs
   - Customizable chart parameters
   - Interactive charts with matplotlib integration
   - Total Battle-inspired color theming
   - Export options for generated charts
   - 3D visualizations with bubble charts for multi-dimensional analysis

5. **Report Generation**:
   - Multiple report types for different analysis needs
   - Customizable content with charts, tables, and statistics
   - Professional styled HTML reports
   - PDF export capability
   - Intelligent chart generation and integration

## Challenges and Solutions
1. **CSV Encoding Issues**:
   - Solution: Implemented multi-encoding support with fallback mechanisms

2. **PySide6 and Matplotlib Integration**:
   - Solution: Used proper backend configuration (QtAgg) for compatibility

3. **System-Level Drag and Drop Limitations**:
   - Challenge: Drag and drop functionality was not working at the system level
   - Solution: Completely removed drag and drop functionality
   - Solution: Enhanced the File menu import option
   - Solution: Simplified the UI to focus on reliable methods

4. **Data Filtering Performance**:
   - Solution: Optimized QSortFilterProxyModel implementation

5. **UI Aesthetics and Consistency**:
   - Challenge: Creating a professional, game-inspired interface
   - Solution: Implemented a Total Battle-themed dark blue and gold color scheme
   - Solution: Added custom styling for all UI components
   - Solution: Enhanced visual feedback and component interaction
   - Solution: Applied consistent styling across all application elements

6. **Dict vs DataFrame Error Handling**:
   - Challenge: Dictionary and DataFrame objects require different empty/null checks
   - Solution: Implemented proper type-specific validation in update_chart
   - Solution: Added dedicated pattern for checking dictionaries vs DataFrames

7. **UI Architecture Issues**:
   - Challenge: Duplicated menu items due to initialization sequence
   - Solution: Restructured method calls to prevent duplication
   - Solution: Consolidated UI initialization into proper sequence

8. **Report Generation and Export**:
   - Challenge: Creating professional reports with integrated charts and data
   - Solution: Used QTextBrowser for HTML rendering with custom CSS
   - Solution: Implemented chart generation and temporary storage for reports
   - Solution: Used QPrinter for high-quality PDF output
   - Solution: Created modular report structure for different analysis types

9. **Multi-dimensional Data Visualization**:
   - Challenge: Displaying relationships between multiple metrics
   - Solution: Implemented bubble charts for 3D data visualization
   - Solution: Added efficiency calculations for improved metrics
   - Solution: Enhanced chart labeling and annotations for better context

## Future Enhancements
1. Additional data analysis algorithms
2. Enhanced chart customization
3. Data export in multiple formats
4. User preference saving
5. Advanced filtering capabilities
6. Batch processing for multiple files
7. Data comparison features 
8. Additional Total Battle-specific visualization types
9. Theme customization options
10. Player performance tracking over time 
11. Interactive reports with dynamic filtering
12. AI-powered insights and recommendations
13. Cloud storage integration for data sharing 

## Recent UI Improvements
- Fixed UI inconsistencies between Analysis tab and Raw Data tab:
  - Moved view selection into the filter options in the Analysis tab
  - Renamed filter box to "Filter and View Options" for better clarity
  - Made the Analysis tab layout consistent with the Raw Data tab
  - Fixed the "select specific values" checkbox functionality
  - Improved value list population in the Analysis tab
- Enhanced German umlaut handling:
  - Improved detection of German umlauts in CSV files
  - Added automatic fixing of garbled German characters
  - Prioritized German-friendly encodings (cp1252, latin1, iso-8859-1) when umlauts are detected
  - Added proper UTF-8 export to preserve special characters
- Improved user experience:
  - Made filter controls more intuitive and consistent across tabs
  - Enhanced value selection with proper visibility toggling
  - Added signal blocking during list updates to prevent recursive calls
  - Improved error handling and status messages

## Recent Bug Fixes (2024-06-04)
- Fixed duplicate toggle_analysis_value_selection methods causing conflicts
- Fixed analysis_column_selector not being populated with columns from loaded data
- Fixed analysis_value_panel not being properly shown/hidden when checkbox is toggled
- Enhanced toggle_value_selection methods to handle different state parameter types
- Added comprehensive debugging output to diagnose and fix issues
- Fixed German umlaut detection and handling in CSV files
- Improved error handling and status messages throughout the application
- Fixed inconsistent method signatures and parameter handling

## Application Flow
1. User launches the application using one of the custom launchers for enhanced stability
2. User imports data via:
   - File menu → Import CSV File option
   - "Select CSV File" button in the import area
3. The application processes the data and displays it in the Raw Data tab
4. User can apply filters to view specific subsets of data
5. The Analysis tab provides statistical insights with various analysis views
6. The Charts tab offers customizable visualizations of the data
7. The Report tab generates comprehensive reports with charts, tables, and statistics
8. Results can be exported as CSV files, charts as images, or reports as HTML/PDF

## Report Types
The Report tab offers four different report types:

1. **Full Report**:
   - Complete overview of all data metrics
   - Key statistics on players, chests, and sources
   - Performance rankings and comparisons
   - Multiple charts and tables showing overall data patterns

2. **Player Performance**:
   - Focus on individual player achievements
   - Rankings by total score and efficiency
   - Charts comparing player performance
   - Detailed tables with player statistics

3. **Chest Type Analysis**:
   - Distribution of scores by chest type
   - Percentage breakdown of chest value
   - Charts showing chest type comparisons
   - Tables with detailed chest statistics

4. **Source Analysis**:
   - Distribution of scores by source
   - Percentage breakdown of source value
   - Stacked charts showing source contributions per player
   - Tables with detailed source statistics

## Chart Types
The application provides multiple chart types for different visualization needs:

1. **Bar Chart**:
   - Best for comparing categorical data
   - Shows values as vertical bars
   - Good for comparing player scores, chest types, etc.

2. **Horizontal Bar Chart**:
   - Similar to bar chart but with horizontal orientation
   - Better for categories with long names
   - Improved readability for many categories

3. **Pie Chart**:
   - Shows proportions of categories
   - Displays percentages of the whole
   - Good for source and chest type distribution

4. **Line Chart**:
   - Shows trends over time
   - Tracks progress and changes
   - Ideal for date-based analysis

5. **Scatter Plot**:
   - Shows relationships between two variables
   - Reveals correlations and patterns
   - Good for comparing Total Score vs Chest Count

6. **Bubble Chart**:
   - Three-dimensional display (x, y, and bubble size)
   - Shows efficiency (points per chest) as bubble size
   - Perfect for understanding player performance metrics

7. **Stacked Bar Chart**:
   - Shows composition of categories
   - Displays source breakdown per player
   - Reveals contribution patterns

## Running the Application

The application can be launched using the unified launcher script that includes proper error handling and styling:

```bash
python run.py
```

To run the application with UV (recommended):

```bash
# Install dependencies with UV
uv pip install -e .

# Run the application
python run.py
```

Alternatively, you can run the main file directly:

```bash
python src/total-battle-analyzer.py
```

The launcher script provides these advantages:
- Enhanced error handling with detailed tracebacks and user-friendly dialogs
- Guaranteed proper theme application
- Improved window visibility and focus
- Fallback import mechanism if standard imports fail
1. **Standard Launch**: Run the main application directly
   ```bash
   python src/total-battle-analyzer.py
   ```

2. **Simple Launcher**: Use the simple launcher for basic styling and error handling
   ```bash
   python simple_launcher.py
   ```

3. **Fixed Application Launcher**: Use the