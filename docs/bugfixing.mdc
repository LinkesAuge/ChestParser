       error_msg = f"Error creating chart: {str(e)}"
       print(f"ERROR: {error_msg}")
       import traceback
       traceback.print_exc()
       QMessageBox.critical(self, "Chart Error", error_msg)
   ```

4. Added specific logging for each chart type:
   ```python
   print(f"Creating {chart_type} with x={x_column}, y={y_column}")
   print("Generating bar chart...")
   ```

**Verification:**
The chart generation now provides detailed logging to diagnose issues, properly checks for column existence before attempting to plot, and displays user-friendly error messages when problems occur. 

### 2024-03-24: Improved German Umlaut Detection and Handling

**Issue:**
The application was not correctly identifying German umlauts (like in "Feldjäger") despite them being present in the file. The log showed the character as "FeldjÃ¤ger" and incorrectly reported "Data contains German umlauts: False".
   ```

**Root Cause:**
The umlaut detection logic only looked for properly formatted umlauts ('äöüÄÖÜß') but didn't check for garbled representations that occur when files are loaded with incorrect encodings (like 'Ã¤' instead of 'ä').

4. Added specific logging for each chart type:
   ```python
   print(f"Creating {chart_type} with x={x_column}, y={y_column}")
   print("Generating bar chart...")
   ```

**Verification:**
The chart generation now provides detailed logging to diagnose issues, properly checks for column existence before attempting to plot, and displays user-friendly error messages when problems occur. 

### 2024-03-24: Improved German Umlaut Detection and Handling

**Issue:**
The application was not correctly identifying German umlauts (like in "Feldjäger") despite them being present in the file. The log showed the character as "FeldjÃ¤ger" and incorrectly reported "Data contains German umlauts: False".

**Root Cause:**
The umlaut detection logic only looked for properly formatted umlauts ('äöüÄÖÜß') but didn't check for garbled representations that occur when files are loaded with incorrect encodings (like 'Ã¤' instead of 'ä').

**Solution:**
1. Enhanced the umlaut detection by checking for both proper and garbled umlaut representations:
   ```python
   # Check for both properly formatted umlauts and common garbled representations
   has_proper_umlauts = any(char in sample_data for char in 'äöüÄÖÜß')
   
   # Check for garbled umlaut representations
   garbled_umlaut_patterns = ['Ã¤', 'Ã¶', 'Ã¼', 'Ã„', 'Ã–', 'Ãœ', 'ÃŸ', 'FeldjÃ¤ger', 'Feldjäger']
   has_garbled_umlauts = any(pattern in sample_data for pattern in garbled_umlaut_patterns)
   ```

2. Added automatic repair of garbled umlauts in the DataFrame:
   ```python
   # If we have garbled umlauts, try to fix them
   if 'FeldjÃ¤ger' in sample_data:
       print("Found misencoded 'FeldjÃ¤ger' - this should be 'Feldjäger'")
       
       # Fix PLAYER column if needed
       if 'PLAYER' in df.columns and df['PLAYER'].str.contains('FeldjÃ¤ger').any():
           df['PLAYER'] = df['PLAYER'].str.replace('FeldjÃ¤ger', 'Feldjäger')
   ```

3. Improved file reading to check more content for umlauts:
   ```python
   # Read more content to increase chances of finding umlauts
   f.seek(0)
   more_content = f.read(4096)
   has_potential_umlauts_extended = any(pattern in more_content for pattern in umlaut_patterns)
   ```

4. Enhanced the manual file reading approach with better umlaut handling:
   - Added detection of German name patterns that should contain umlauts
   - Included more comprehensive checks for garbled characters
   - Added automatic fixing of specific garbled patterns
   - Added verification and reporting of fixed player names

**Verification:**
The application now correctly identifies German umlauts even when they appear as garbled characters in the loaded data, and automatically repairs common encoding issues with player names containing umlauts. 

### 2024-03-24: Fixed Chart Column Name Case Sensitivity Issue

**Issue:**
After fixing the German umlaut detection, charts were still failing with an error: "x_column 'Player' not found in DataFrame columns" despite having a "PLAYER" column in the DataFrame.

**Root Cause:**
The chart data selector was using title case column names ("Player", "Source", "Chest Type") while the DataFrame columns were all uppercase ("PLAYER", "SOURCE", "CHEST"). This case mismatch caused the column lookup to fail.

**Solution:**
1. Updated the chart data selector to use the actual uppercase column names to match the DataFrame:
   ```python
   # Chart data selector - use actual column names that match the DataFrame
   self.chart_data_selector = QComboBox()
   self.chart_data_selector.addItems(["PLAYER", "SOURCE", "CHEST"])
   ```

2. Simplified the update_chart method by removing the column name mapping code, as it's no longer needed:
   ```python
   # Get selected parameters
   chart_type = self.chart_type_selector.currentText()
   x_column = self.chart_data_selector.currentText()  # Now directly matches DataFrame columns
   y_column = self.analysis_selector.currentText()
   ```

3. Updated the chart code to use the direct column name for labels and plotting.

**Verification:**
Charts now generate correctly with the matching column names, and the error "x_column 'Player' not found in DataFrame columns" no longer appears. 

### 2024-03-25: Fixed Chart View Selection for SOURCE and CHEST Columns

**Issue:**
When selecting SOURCE or CHEST as the x-axis column for charts, the application would show an error "x_column 'SOURCE' not found in DataFrame columns" or "x_column 'CHEST' not found in DataFrame columns".

**Root Cause:**
The chart generation code was using the selected view from the analysis selector dropdown (default: "Player Total Scores"), which only contains PLAYER and SCORE columns. It wasn't automatically switching to the appropriate view based on the selected x-column.

**Solution:**
1. Modified the `update_chart` method to automatically select the appropriate view based on the x-column:
   ```python
   # Auto-select the appropriate view based on x_column
   if x_column == "PLAYER":
       selected_view = "Player Total Scores"
   elif x_column == "CHEST":
       selected_view = "Scores by Chest Type"
   elif x_column == "SOURCE":
       selected_view = "Scores by Source"
   else:
       selected_view = self.analysis_selector.currentText()
   
   # Update the analysis selector to match our selection
   index = self.analysis_selector.findText(selected_view)
   if index >= 0:
       self.analysis_selector.setCurrentIndex(index)
   ```
2. Simplified the y-column selection logic
3. Improved the detection of whether to use SCORE or COUNT columns in the data

**Verification:**
Confirmed that charts now generate correctly when selecting any of the three column options (PLAYER, SOURCE, or CHEST) without errors.

### 2024-03-25: Improved Button Text Readability

**Issue:**
The "Select CSV File" button text was black, making it difficult to read against the gold gradient background.

**Root Cause:**
The QPushButton style in the StyleManager class was using a hard-coded black color (#000000) for text rather than using the theme's foreground color.

**Solution:**
Changed the button text color in the StyleManager class from black to white (using the theme's foreground color):
```css
QPushButton {
    background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                              stop:0 {DARK_THEME['button_gradient_top']},
                              stop:1 {DARK_THEME['button_gradient_bottom']});
    color: {DARK_THEME['foreground']}; /* Changed from #000000 to use white text */
    border: 1px solid {DARK_THEME['button_gradient_bottom']};
    border-radius: 4px;
    padding: 6px 12px;
    font-weight: bold;
    min-width: 80px;
}
```

**Verification:**
Confirmed that all buttons, including the "Select CSV File" button, now display white text that is clearly readable against the gold gradient background.

### 2024-03-25: Enforced Required CSV Columns

**Issue:**
The application was importing CSV files regardless of whether they contained all required columns, and it was not clear which columns were mandatory.

**Root Cause:**
The data loading code only showed warnings when required columns were missing, without actually enforcing their presence. It also kept all columns from the CSV, which could lead to confusion.

**Solution:**
1. Modified the `DataProcessor.load_csv` method to enforce that all required columns must be present:
   ```python
   # Check if required columns are present

**Solution:**
1. Enhanced the umlaut detection by checking for both proper and garbled umlaut representations:
   required_columns = ['DATE', 'PLAYER', 'SOURCE', 'CHEST', 'SCORE']
   missing_columns = [col for col in required_columns if col not in df.columns]
   
   if missing_columns:
       error_msg = f"Missing required columns: {missing_columns}. CSV file must contain all of these columns: {required_columns}"
       print(error_msg)
       raise ValueError(error_msg)
   ```

2. Added code to keep only the required columns and remove any extras:
   ```python
   # Keep only the required columns, drop everything else
   extra_columns = [col for col in df.columns if col not in required_columns]
   if extra_columns:
       print(f"Dropping extra columns: {extra_columns}")
       df = df[required_columns]
   ```

3. Updated this validation in all CSV loading code paths including:
   - Standard pandas loading
   - Alternative separator (semicolon) loading
   - Manual decoding with different encodings
   - UTF-8 with BOM detection

4. Updated the import instructions in the UI to clearly state the requirements:
   ```
   The CSV file MUST contain ALL of the following columns:
   DATE, PLAYER, SOURCE, CHEST, SCORE

   Files missing any of these columns will be rejected.
   Any additional columns will be automatically removed.
   ```

**Verification:**
Confirmed that the application now correctly:
1. Rejects CSV files that don't contain all required columns
2. Removes any additional columns beyond the required ones
3. Clearly informs users about the column requirements in the UI

### 2024-03-26: Fixed Import and Export Directory Handling

**Issue:**
The application was creating import and export directories within the src folder instead of using existing directories at the project root.

**Root Cause:**
The ConfigManager was initialized with a hardcoded approach that always created directories relative to the current working directory, which could vary depending on how the application was started.

**Solution:**
1. Modified the ConfigManager.__init__ method to intelligently detect the project root and use the existing import/export folders:
   ```python
   # Determine if we're in the src directory and need to go up one level
   if current_dir.name == 'src':
       self.app_dir = current_dir.parent
       print(f"Detected running from src directory, using parent as project root: {self.app_dir}")
   else:
       self.app_dir = current_dir
       print(f"Using current directory as project root: {self.app_dir}")
   ```

2. Added verification to check if the directories exist before using them:
   ```python
   # Verify these directories exist and log a message
   if not self.import_dir.exists():
       print(f"Warning: Import directory does not exist at {self.import_dir}. Using fallback.")
       # Fallback to creating a temporary directory if needed
       self.import_dir = self.app_dir / "import"
       self.import_dir.mkdir(exist_ok=True)
   ```

3. Added logging to show which directories are being used:
   ```python
   print(f"Using import directory: {self.import_dir}")
   print(f"Using export directory: {self.export_dir}")
   ```

**Verification:**
Confirmed that the application now correctly:
1. Detects and uses the existing import and export folders at the project root
2. Works correctly whether started from within the src directory or from the project root
3. Provides informative logging about which directories are being used

## 2024-07-17: Fixed Export Button Error and CHEST Category Chart Issues

### Issues:
1. The export buttons in Raw Data and Analysis tabs were throwing an error: `AttributeError: 'str' object has no attribute 'mkdir'`
2. In the Charts tab, the "Group by" option for CHEST wasn't working correctly, preventing visualization of chest-related data

### Root Causes:
1. **Export Button Error**: 
   - In both `export_raw_data` and `export_analysis_data` methods, the code was trying to call the `mkdir()` method on a string returned by `ConfigManager.get_export_directory()`
   - The `get_export_directory()` method returns a string path, but the code expected a Path object

2. **CHEST Category Chart Issue**:
   - There were multiple issues with the `_get_chart_data` method:
   - The indentation was incorrect, causing code blocks to be skipped
   - There was no proper error handling for missing analysis results
   - There were inconsistencies in how different data categories were processed
   - Debug information was incomplete, making it difficult to diagnose issues

### Solutions:
1. **Fixed Export Button Error**:
   - Modified both `export_raw_data` and `export_analysis_data` methods to convert the string path returned by `ConfigManager.get_export_directory()` to a Path object
   - Added a comment to clarify the conversion: `export_dir = Path(self.config_manager.get_export_directory())`
   - This ensures that the `mkdir()` method can be called on the directory

2. **Fixed CHEST Category Chart Issues**:
   - Completely refactored the `_get_chart_data` method to ensure consistent handling of all data categories
   - Added proper null checks for `analysis_results` at the beginning of the method
   - Implemented consistent debug output for all data categories (PLAYER, CHEST, SOURCE, DATE)
   - Fixed the return logic to ensure each code path properly returns either data or None
   - Added detailed error messages to help diagnose issues in the future
   - Ensured the method properly processes and returns chest_totals data when CHEST category is selected

### Verification:
1. **Export Button Functionality**:
   - The Raw Data and Analysis export buttons now work correctly without throwing any errors
   - Exported files are correctly saved to the configured export directory
   - The file save dialog shows up with the correct default path and filename

2. **CHEST Category Chart Functionality**:
   - The Charts tab now correctly displays data when "CHEST" is selected in the Group by dropdown
   - Chart visualization works properly for chest data
   - Debug information shows correct data retrieval from chest_totals
   - Charts for all other categories (PLAYER, SOURCE, DATE) continue to work correctly
   - Error handling is more robust, preventing crashes when data is missing

## 2024-07-17: Enhanced CHEST Category Options in Charts Tab

### Issues
1. The CHEST grouping option in the Charts tab lacked the same sorting and measure options as the PLAYER grouping
2. CHEST category was only displaying "SCORE" and "CHEST_COUNT" as measure options
3. Only "CHEST" was available as a sort option for the CHEST category

### Root Causes
1. The `update_available_measures` method wasn't adding additional measure options for the CHEST category
2. The `update_sort_options` method only added "CHEST" to the sort options for the CHEST category
3. The `_get_chart_data` method wasn't adding necessary calculated fields for the CHEST category

### Solutions
1. Enhanced the `update_available_measures` method to:
   - Add "TOTAL_SCORE" as a measure option for the CHEST category
   - Add "EFFICIENCY" as a measure option when both SCORE and CHEST_COUNT are available
   - Add source-related columns from player_overview to provide consistent options between PLAYER and CHEST categories

2. Updated the `update_sort_options` method to:
   - Add "CHEST_COUNT" and "TOTAL_SCORE" as sorting options for the CHEST category
   - Add "CHEST_COUNT" as a sorting option for the SOURCE and DATE categories for consistency

3. Modified the `_get_chart_data` method to:
   - Create a "TOTAL_SCORE" column from "SCORE" for CHEST, SOURCE, and DATE categories
   - Calculate "EFFICIENCY" for the CHEST category when both SCORE and CHEST_COUNT are available
   - Improve debug output for better troubleshooting

### Verification
1. The CHEST grouping now has the same measure options as the PLAYER grouping
2. The sort options for the CHEST grouping have been expanded
3. Charts properly display when using TOTAL_SCORE or other additional measures for the CHEST category
4. New calculated fields (TOTAL_SCORE and EFFICIENCY) work correctly in charts and exports

All chart functionality continues to work for all data categories, with consistent options available across all grouping types.
